{"version":3,"file":"30725.js","mappings":"wfACO,0BAAwC,oDAAyD,MAWxG,EAJA,uBACA,wDAKA,4BACA,6BAAgB,GAA2B,MAAQ,gCAAiC,CACpF,WACA,UACA,cACA,0BACA,SACA,CAAS,CACT,CAEA,gCACA,IAAgB,gCAA+B,MAAQ,gCAAqC,CAC5F,WACA,UACA,cACA,0BACA,SACA,CAAS,CACT,CACA,0BACA,2BAAgB,GAAyB,MAAQ,gCAA+B,CAChF,WACA,UACA,cACA,0BACA,SACA,CAAS,CACT,CACA,MACA,4CAOA,MALI,OAAqB,EACzB,kBACA,kCACA,mBACK,EACL,CACA","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/transaction/actions/gasless/send-gasless-transaction.js"],"sourcesContent":["import { addTransactionToStore } from \"../../transaction-store.js\";\nexport async function sendGaslessTransaction({ account, transaction, serializableTransaction, gasless, }) {\n    // TODO: handle special case for mutlicall transactions!\n    // Steps:\n    // 1. check if the method is `multicall` by comparing the 4bytes data with the `multicall` selector\n    // 2. split the rest of the data into its \"parts\"\n    // 3. solidityPack the parts with the part data + the `account.address`\n    // see v4: `core/classes/transactions.ts>Transaction>prepareGasless:L551`\n    if (serializableTransaction.value && serializableTransaction.value > 0n) {\n        throw new Error(\"Gasless transactions cannot have a value\");\n    }\n    // TODO: multiply gas by 2 for some reason(?) - we do in v4, *should* we?\n    let result;\n    // biconomy\n    if (gasless.provider === \"biconomy\") {\n        const { relayBiconomyTransaction } = await import(\"./providers/biconomy.js\");\n        result = await relayBiconomyTransaction({\n            account,\n            transaction,\n            serializableTransaction,\n            gasless,\n        });\n    }\n    // openzeppelin\n    if (gasless.provider === \"openzeppelin\") {\n        const { relayOpenZeppelinTransaction } = await import(\"./providers/openzeppelin.js\");\n        result = await relayOpenZeppelinTransaction({\n            account,\n            transaction,\n            serializableTransaction,\n            gasless,\n        });\n    }\n    if (gasless.provider === \"engine\") {\n        const { relayEngineTransaction } = await import(\"./providers/engine.js\");\n        result = await relayEngineTransaction({\n            account,\n            transaction,\n            serializableTransaction,\n            gasless,\n        });\n    }\n    if (!result) {\n        throw new Error(\"Unsupported gasless provider\");\n    }\n    addTransactionToStore({\n        address: account.address,\n        transactionHash: result.transactionHash,\n        chainId: transaction.chain.id,\n    });\n    return result;\n}\n//# sourceMappingURL=send-gasless-transaction.js.map"],"names":[],"sourceRoot":""}