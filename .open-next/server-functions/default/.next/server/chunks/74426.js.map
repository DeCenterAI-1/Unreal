{"version":3,"file":"74426.js","mappings":"8fAKO,oBACP,WAAY,sDAAwD,EACpE,iBACA,MACA,uDAEA,wCACA,GACA,gBAA2C,wBAA6B,EAExE,eACA,UACA,sBACA,kBACA,QACA,CAAK,CACL,OAAU,QAAW,IACrB,8BACQ,QAA8B,UAAG,wBAA8B,CACvE,CAAK,EACL,MACA,CAIO,sCAA4C,WAA8B,EAEjF,YADA,OAA2B,QAAW,IAEtC,cACA,MAAkB,QAA8B,UAAG,wBAA8B,CAGjF,CAIO,0BAAuC,mDAAwD,EACtG,yCACA,qCACA,4EAEA,OACA,WACA,uBACA,uDAAiG,EAAM,GAAG,UAAgB,UAC1H,uDAAiG,EAAM,GAAG,UAAgB,UAC1H,oBAAqD,KAAS,GAAG,UAAgB,IACjF,GACA,GACA,CACA,YACA,oDACA,iDACA,CACA,WACA,mDACA,gDACA,EAEA,mBACA,QACA,YACA,QACA,kBACA,kBACA,gBACa,CACJ,CACJ,EAEL,OACA,MAFA,yBAEA,MACA,0DACA,CACA","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/wallets/wallet-connect/receiver/session-proposal.js"],"sourcesContent":["import { disconnectWalletConnectSession } from \"./index.js\";\nimport { getSessions, saveSession } from \"./session-store.js\";\n/**\n * @internal\n */\nexport async function onSessionProposal(options) {\n    const { wallet, walletConnectClient, event, chains, onConnect } = options;\n    const account = wallet.getAccount();\n    if (!account) {\n        throw new Error(\"No account connected to provided wallet\");\n    }\n    const origin = event.verifyContext?.verified?.origin;\n    if (origin) {\n        await disconnectExistingSessions({ origin, walletConnectClient });\n    }\n    const session = await acceptSessionProposal({\n        account,\n        walletConnectClient,\n        sessionProposal: event,\n        chains,\n    });\n    await saveSession(session);\n    wallet.subscribe(\"disconnect\", () => {\n        disconnectWalletConnectSession({ session, walletConnectClient });\n    });\n    onConnect?.(session);\n}\n/**\n * @internal\n */\nexport async function disconnectExistingSessions({ walletConnectClient, origin, }) {\n    const sessions = await getSessions();\n    for (const session of sessions) {\n        if (session.origin === origin) {\n            await disconnectWalletConnectSession({ session, walletConnectClient });\n        }\n    }\n}\n/**\n * @internal\n */\nexport async function acceptSessionProposal({ account, walletConnectClient, sessionProposal, chains, }) {\n    if (!sessionProposal.params.requiredNamespaces?.eip155 &&\n        !sessionProposal.params.optionalNamespaces?.eip155) {\n        throw new Error(\"No EIP155 namespace found in Wallet Connect session proposal\");\n    }\n    const namespaces = {\n        chains: [\n            ...Array.from(new Set([\n                ...(sessionProposal.params.requiredNamespaces?.eip155?.chains?.map((chain) => `${chain}:${account.address}`) ?? []),\n                ...(sessionProposal.params.optionalNamespaces?.eip155?.chains?.map((chain) => `${chain}:${account.address}`) ?? []),\n                ...(chains?.map((chain) => `eip155:${chain.id}:${account.address}`) ??\n                    []),\n            ])),\n        ],\n        methods: [\n            ...(sessionProposal.params.requiredNamespaces?.eip155?.methods ?? []),\n            ...(sessionProposal.params.optionalNamespaces?.eip155?.methods ?? []),\n        ],\n        events: [\n            ...(sessionProposal.params.requiredNamespaces?.eip155?.events ?? []),\n            ...(sessionProposal.params.optionalNamespaces?.eip155?.events ?? []),\n        ],\n    };\n    const approval = await walletConnectClient.approve({\n        id: sessionProposal.id,\n        namespaces: {\n            eip155: {\n                accounts: namespaces.chains,\n                methods: namespaces.methods,\n                events: namespaces.events,\n            },\n        },\n    });\n    const session = await approval.acknowledged();\n    return {\n        topic: session.topic,\n        origin: sessionProposal.verifyContext?.verified?.origin || \"Unknown origin\",\n    };\n}\n//# sourceMappingURL=session-proposal.js.map"],"names":[],"sourceRoot":""}