{"version":3,"file":"46708.js","mappings":"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","sources":["webpack://unreal/./src/app/libs/constants.ts","webpack://unreal/./src/hooks/useComments.tsx","webpack://unreal/./src/app/home/components/modals/modalWrapper.tsx","webpack://unreal/./src/queries/post/getPostsByUser.ts","webpack://unreal/./src/hooks/usePinnedPosts.tsx","webpack://unreal/./src/queries/post/getPostLikes.ts","webpack://unreal/./src/hooks/usePostLikes.tsx","webpack://unreal/./src/queries/post/likePost.tsx","webpack://unreal/./src/hooks/useLikePost.tsx","webpack://unreal/./src/app/home/components/modals/shareModal.tsx","webpack://unreal/./src/queries/post/addNotification.ts","webpack://unreal/./src/app/home/components/imageOptionMenu.tsx"],"sourcesContent":["export const MD_BREAKPOINT = 768;\nexport const POST_GROUPS = [\"PUBLIC\", \"PRIVATE\", \"LIKED\", \"PINNED\", \"DRAFT\"];\nexport const TOKEN_ADDRESS = \"\";\nexport const LIST_LIMIT = 20;\n","import { supabase } from \"$/supabase/client\";\nimport { CommentWithUser } from \"$/types/data.types\";\nimport { axiosInstanceLocal } from \"@/lib/axiosInstance\";\nimport { addNotification } from \"@/queries/post/addNotification\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport {\n  dedupedRequest,\n  normalizeEntity,\n  updateEntity,\n} from \"@/utils/queryOptimizer\";\nimport { logError } from \"@/utils/sentryUtils\";\n\n// Define extended comment type that includes user data\ninterface ExtendedComment extends CommentWithUser {\n  user?: {\n    id: string;\n    avatar_url?: string;\n    username?: string;\n  };\n}\n\n// ✅ Fetch comments with optimized caching\nexport function useComments(postId: string) {\n  const queryClient = useQueryClient();\n  const [page, setPage] = useState(1);\n  const pageSize = 10;\n\n  const result = useQuery<ExtendedComment[]>({\n    queryKey: [\"comments\", postId, { page, pageSize }],\n    queryFn: async () => {\n      // Use deduped request to prevent duplicate API calls\n      return dedupedRequest(\n        `comments-${postId}-${page}-${pageSize}`,\n        async () => {\n          const { data } = await axiosInstanceLocal.get(\n            `/api/comments?postId=${postId}&page=${page}&pageSize=${pageSize}`\n          );\n\n          // Store comments in normalized cache\n          data?.forEach((comment: ExtendedComment) => {\n            normalizeEntity(\"comments\", comment);\n\n            // Also store user data if available\n            if (comment.user) {\n              normalizeEntity(\"users\", comment.user);\n            }\n          });\n\n          return data || [];\n        }\n      );\n    },\n    staleTime: 1000 * 60 * 3, // Cache for 3 minutes\n    // Use placeholderData instead of keepPreviousData (TanStack v5)\n    placeholderData: (prev) => prev,\n  });\n\n  // Helper to load more comments\n  const loadMoreComments = useCallback(() => {\n    if (!result.isLoading && !result.isFetching) {\n      setPage((prev) => prev + 1);\n    }\n  }, [result.isLoading, result.isFetching]);\n\n  // Helper to prefetch the next page of comments\n  const prefetchNextPage = useCallback(() => {\n    if (!result.isLoading && !result.isFetching) {\n      queryClient.prefetchQuery({\n        queryKey: [\"comments\", postId, { page: page + 1, pageSize }],\n        queryFn: async () => {\n          const { data } = await axiosInstanceLocal.get(\n            `/api/comments?postId=${postId}&page=${\n              page + 1\n            }&pageSize=${pageSize}`\n          );\n          return data || [];\n        },\n      });\n    }\n  }, [\n    queryClient,\n    postId,\n    page,\n    pageSize,\n    result.isLoading,\n    result.isFetching,\n  ]);\n\n  // Automatically prefetch next page when close to end\n  useEffect(() => {\n    if (Array.isArray(result.data) && result.data.length === pageSize) {\n      prefetchNextPage();\n    }\n  }, [result.data, prefetchNextPage, pageSize]);\n\n  return {\n    ...result,\n    loadMoreComments,\n    prefetchNextPage,\n    page,\n    hasMore: Array.isArray(result.data) && result.data.length === pageSize,\n  };\n}\n\n// Fetch replies with optimized caching\nexport function useReplies(parentId: string) {\n  return useQuery<ExtendedComment[]>({\n    queryKey: [\"replies\", parentId],\n    queryFn: async () => {\n      return dedupedRequest(`replies-${parentId}`, async () => {\n        const { data } = await axiosInstanceLocal.get(\n          `/api/comments/replies?parentId=${parentId}`\n        );\n\n        // Store replies in normalized cache\n        data?.forEach((reply: ExtendedComment) => {\n          normalizeEntity(\"comments\", reply);\n\n          // Also store user data if available\n          if (reply.user) {\n            normalizeEntity(\"users\", reply.user);\n          }\n        });\n\n        return data || [];\n      });\n    },\n    staleTime: 1000 * 60 * 3, // Cache for 3 minutes\n  });\n}\n\n// ✅ Post comment with optimistic updates\nexport function usePostComment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (comment: {\n      post_id: string;\n      content: string;\n      parent_id?: string;\n      author: string;\n      senderId: string;\n    }) => {\n      const { data } = await axios.post(\"/api/comments\", comment);\n\n      if (data) {\n        addNotification({\n          userId: comment.author as string,\n          postId: parseInt(comment.post_id), // Convert string to number\n          type: \"comment\",\n          senderId: comment.senderId,\n        });\n      }\n\n      return data;\n    },\n\n    onMutate: async (newComment) => {\n      // Get the post ID and parent ID (if it's a reply)\n      const postId = newComment.post_id;\n      const parentId = newComment.parent_id;\n\n      // Cancel any outgoing refetches to prevent them overwriting our optimistic update\n      if (parentId) {\n        await queryClient.cancelQueries({ queryKey: [\"replies\", parentId] });\n      } else {\n        await queryClient.cancelQueries({ queryKey: [\"comments\", postId] });\n      }\n\n      // Snapshot previous data\n      const previousData = parentId\n        ? queryClient.getQueryData([\"replies\", parentId])\n        : queryClient.getQueryData([\"comments\", postId]);\n\n      // Create optimistic comment\n      const optimisticComment = {\n        id: `temp-${Date.now()}`,\n        content: newComment.content,\n        created_at: new Date().toISOString(),\n        author: newComment.author,\n        post_id: postId,\n        parent_id: parentId || null,\n        likes: 0,\n      };\n\n      // Add optimistic comment to cache\n      if (parentId) {\n        queryClient.setQueryData([\"replies\", parentId], (old: any) => {\n          return old ? [optimisticComment, ...old] : [optimisticComment];\n        });\n      } else {\n        queryClient.setQueryData([\"comments\", postId], (old: any) => {\n          return old ? [optimisticComment, ...old] : [optimisticComment];\n        });\n      }\n\n      // Return context for potential rollback\n      return { previousData, postId, parentId };\n    },\n\n    onError: (err, newComment, context) => {\n      // Rollback on error\n      if (context?.parentId) {\n        queryClient.setQueryData(\n          [\"replies\", context.parentId],\n          context.previousData\n        );\n      } else if (context?.postId) {\n        queryClient.setQueryData(\n          [\"comments\", context.postId],\n          context.previousData\n        );\n      }\n    },\n\n    onSuccess: (data, variables) => {\n      // Get the post ID and parent ID (if it's a reply)\n      const postId = variables.post_id;\n      const parentId = variables.parent_id;\n\n      // Add new comment to normalized cache\n      normalizeEntity(\"comments\", data);\n\n      // Update comment count on the post\n      queryClient.setQueryData([\"post\", parseInt(postId)], (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          comment_count: (old.comment_count || 0) + 1,\n        };\n      });\n\n      // Update optimistic comment with real data\n      if (parentId) {\n        queryClient.invalidateQueries({ queryKey: [\"replies\", parentId] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"comments\", postId] });\n      }\n    },\n  });\n}\n\n// ✅ Real-time updates\nexport function useRealtimeComments(postId: string) {\n  const queryClient = useQueryClient();\n\n  React.useEffect(() => {\n    const channel = supabase\n      .channel(`comments-${postId}`)\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table: \"comments\" },\n        () => {\n          queryClient.invalidateQueries({ queryKey: [\"comments\", postId] });\n        }\n      )\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table: \"comment_likes\" },\n        () => {\n          queryClient.invalidateQueries({ queryKey: [\"comments\", postId] });\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [postId, queryClient]);\n}\n\n// ✅ Real-time updates\nexport function useRealtimeReplies(parentId: string) {\n  const queryClient = useQueryClient();\n\n  React.useEffect(() => {\n    const channel = supabase\n      .channel(`replies-${parentId}`)\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table: \"comments\" },\n        () => {\n          queryClient.invalidateQueries({ queryKey: [\"replies\", parentId] });\n        }\n      )\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table: \"comment_likes\" },\n        () => {\n          queryClient.invalidateQueries({ queryKey: [\"replies\", parentId] });\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [parentId, queryClient]);\n}\n\n// ✅ Optimistic Like\nexport function useLikeComment(postId: string) {\n  const queryClient = useQueryClient();\n  // log(\"Processing like comment for post\", { postId });\n  return useMutation({\n    mutationFn: async (commentId: string) => {\n      await axios.post(\"/api/comments/like\", { comment_id: commentId });\n    },\n    onMutate: async (commentId: string) => {\n      await queryClient.cancelQueries({ queryKey: [\"comments\", postId] });\n\n      const previousComments = queryClient.getQueryData([\"comments\", postId]);\n      // log(\"Previous comments state\", previousComments);\n      queryClient.setQueryData(\n        [\"comments\", postId],\n        (oldData: CommentWithUser[]) => {\n          if (!oldData) return [];\n          return oldData.map((comment: CommentWithUser) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  like_count: comment.like_count + 1,\n                  user_liked: true,\n                }\n              : comment\n          );\n        }\n      );\n\n      return { previousComments };\n    },\n    onError: (_err, _commentId, context) => {\n      logError(\"Error liking comment\", _err);\n      if (context?.previousComments) {\n        queryClient.setQueryData(\n          [\"comments\", postId],\n          context.previousComments\n        );\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"comments\", postId] });\n    },\n  });\n}\n\n// ✅ Optimistic Unlike\nexport function useUnlikeComment(postId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (commentId: string) => {\n      await axios.delete(\"/api/comments/like\", {\n        data: { comment_id: commentId },\n      });\n    },\n    onMutate: async (commentId: string) => {\n      await queryClient.cancelQueries({ queryKey: [\"comments\", postId] });\n\n      const previousComments = queryClient.getQueryData([\"comments\", postId]);\n\n      queryClient.setQueryData(\n        [\"comments\", postId],\n        (oldData: CommentWithUser[]) => {\n          if (!oldData) return [];\n          return oldData.map((comment: CommentWithUser) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  like_count: Math.max(comment.like_count - 1, 0),\n                  user_liked: false,\n                }\n              : comment\n          );\n        }\n      );\n\n      return { previousComments };\n    },\n    onError: (_err, _commentId, context) => {\n      logError(\"Error unliking comment\", _err);\n      if (context?.previousComments) {\n        queryClient.setQueryData(\n          [\"comments\", postId],\n          context.previousComments\n        );\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"comments\", postId] });\n    },\n  });\n}\n\n// ✅ Optimistic Like\nexport function useLikeReply(postId: string, parentId: string) {\n  const queryClient = useQueryClient();\n  // log(\"Processing like reply for post\", { postId });\n  return useMutation({\n    //reply is also a comment\n    mutationFn: async (commentId: string) => {\n      await axios.post(\"/api/comments/like\", { comment_id: commentId });\n    },\n    onMutate: async (commentId: string) => {\n      await queryClient.cancelQueries({ queryKey: [\"replies\", parentId] });\n\n      const previousComments = queryClient.getQueryData([\"replies\", parentId]);\n      // log(\"Previous replies state\", previousComments);\n      queryClient.setQueryData(\n        [\"replies\", parentId],\n        (oldData: CommentWithUser[]) => {\n          if (!oldData) return [];\n          return oldData.map((comment: CommentWithUser) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  like_count: comment.like_count + 1,\n                  user_liked: true,\n                }\n              : comment\n          );\n        }\n      );\n\n      return { previousComments };\n    },\n    onError: (_err, _commentId, context) => {\n      logError(\"Error liking reply\", _err);\n      if (context?.previousComments) {\n        queryClient.setQueryData(\n          [\"replies\", parentId],\n          context.previousComments\n        );\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"replies\", parentId] });\n    },\n  });\n}\n\n// ✅ Optimistic Unlike\nexport function useUnlikeReply(postId: string, parentId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (commentId: string) => {\n      await axios.delete(\"/api/comments/like\", {\n        data: { comment_id: commentId },\n      });\n    },\n    onMutate: async (commentId: string) => {\n      await queryClient.cancelQueries({ queryKey: [\"replies\", parentId] });\n\n      const previousComments = queryClient.getQueryData([\"replies\", parentId]);\n\n      queryClient.setQueryData(\n        [\"replies\", parentId],\n        (oldData: CommentWithUser[]) => {\n          if (!oldData) return [];\n          return oldData.map((comment: CommentWithUser) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  like_count: Math.max(comment.like_count - 1, 0),\n                  user_liked: false,\n                }\n              : comment\n          );\n        }\n      );\n\n      return { previousComments };\n    },\n    onError: (_err, _commentId, context) => {\n      logError(\"Error unliking reply\", _err);\n      if (context?.previousComments) {\n        queryClient.setQueryData(\n          [\"replies\", parentId],\n          context.previousComments\n        );\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"replies\", parentId] });\n    },\n  });\n}\n","import { ReactNode } from \"react\";\nimport { CloseIcon } from \"../../../components/icons\";\n\ninterface ModalWrapperProps {\n  title: string;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  children: ReactNode;\n  titleColor?: string;\n}\n\nexport default function ModalWrapper({\n  open,\n  title,\n  titleColor,\n  children,\n  setOpen,\n}: ModalWrapperProps) {\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  if (!open) return;\n  return (\n    <>\n      <div\n        onClick={handleClose}\n        className=\"fixed z-30 top-0 left-0 h-screen w-full shadow-bg\"\n      ></div>\n\n      <div className=\"fixed flex justify-center items-center z-30 top-0 left-0 h-screen w-full\">\n        <div\n          onClick={handleClose}\n          className=\"absolute z-30 top-0 left-0 h-screen w-full shadow-bg\"\n        ></div>\n\n        <div className=\"absolute z-50 rounded-[20px] border-primary-8 border-[1px] p-2 py-3 md:p-6 bg-primary-12 w-[98%] max-w-[520px] flex flex-col\">\n          <div className=\"flex justify-between mb-6\">\n            <p\n              style={{ color: titleColor }}\n              className=\"text-2xl text-primary-3 nasalization\"\n            >\n              {title}\n            </p>\n            <button onClick={handleClose}>\n              <CloseIcon width={24} height={24} color=\"#F5F5F5\" />\n            </button>\n          </div>\n\n          <div>{children}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { Client } from \"$/supabase/client\";\nimport { Post, UploadResponse } from \"$/types/data.types\";\nimport { getRange } from \"@/utils\";\nimport { LIST_LIMIT } from \"@/app/libs/constants\";\nimport { logError, logWarning } from \"@/utils/sentryUtils\";\n\nexport async function getPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"isPrivate\", true)\n    .neq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching user posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getOtherPostsByUser(\n  client: Client,\n  start = 0,\n  postId: number,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for other posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"id\", postId)\n    .neq(\"isPrivate\", true)\n    .neq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching other user posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getPrivatePostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for private posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .eq(\"isPrivate\", true)\n    // .neq(\"isDraft\", true) for now only user sees private post so they can see it even if it is draft\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching private posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\nexport async function getPinnedPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for pinned posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"post_pins\")\n    .select(\n      `\n    posts:posts (\n      *,\n      createdAt\n    )\n  `\n    ) // ✅ Aliases `posts` for better structure\n    .eq(\"user_id\", id)\n    .filter(\"posts.isPrivate\", \"neq\", true)\n    .filter(\"posts.isDraft\", \"neq\", true)\n    .order(\"createdAt\", { ascending: false }) // ✅ Sort correctly\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching pinned posts\", error);\n    throw new Error(error.message);\n  }\n\n  if (!Array.isArray(data)) {\n    logError(\"Unexpected response from Supabase\", { data });\n    throw new Error(\"Invalid data format received from Supabase.\");\n  }\n\n  return (\n    data?.map(({ posts }) => ({\n      ...(posts as Post), // ✅ Explicitly cast `posts` as `Post`\n      author: posts?.author ?? \"\", // Ensure `author` is always a string\n      category: posts?.category ?? null, // Ensure `category` is `string | null`\n      ipfsImages: Array.isArray(posts?.ipfsImages)\n        ? (posts.ipfsImages as UploadResponse[]) // ✅ Already an array\n        : typeof posts?.ipfsImages === \"string\"\n        ? (JSON.parse(posts.ipfsImages) as UploadResponse[]) // ✅ Parse string\n        : null, // ❌ Set to null if neither\n    })) ?? []\n  );\n}\n\nexport async function getIsDraftPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for draft posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .eq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching draft posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\nexport async function getOtherIsDraftPostsByUser(\n  client: Client,\n  start = 0,\n  postId: number,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for other draft posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"id\", postId)\n    .eq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching other draft posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getUserLikedPosts(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for liked posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"likes\")\n    .select(\"posts(*),created_at\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"posts.isPrivate\", true)\n    .neq(\"posts.isDraft\", true)\n    .order(\"created_at\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching liked posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n  // Extract posts, filtering out any null values\n  const posts = data?.flatMap((like) => (like.posts ? [like.posts] : [])) ?? []; // ✅ Ensure posts exist\n\n  return posts.map((post) => ({\n    ...post,\n    author: post.author ?? \"\", // ✅ Ensure `author` is always a string\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[])\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  })) as Post[]; // ✅ Cast the final array as `Post[]`\n}\n","import { supabase } from \"$/supabase/client\";\nimport { getPinnedPostsByUser } from \"@/queries/post/getPostsByUser\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  dedupedRequest,\n  normalizeEntity,\n  updatePostInQueries,\n} from \"@/utils/queryOptimizer\";\nimport { useCallback, useEffect } from \"react\";\nimport { logError } from \"@/utils/sentryUtils\";\n\n// Enhanced hook for fetching pinned posts with optimized caching\nexport function usePinnedPosts(userId: string) {\n  const queryClient = useQueryClient();\n\n  // Check if we have pinned posts in localStorage for immediate display\n  useEffect(() => {\n    if (!userId) return;\n\n    // Try to get cached pinned posts from localStorage for instant display\n    try {\n      const cachedData = localStorage.getItem(`pinned-posts-${userId}`);\n      if (cachedData) {\n        const parsedData = JSON.parse(cachedData);\n        const timestamp = parsedData.timestamp || 0;\n        const posts = parsedData.posts || [];\n\n        // Only use cache if it's less than 1 hour old\n        if (Date.now() - timestamp < 1000 * 60 * 60) {\n          queryClient.setQueryData([\"pinned-posts\", userId], posts);\n        }\n      }\n    } catch (error) {\n      logError(\"Error retrieving cached pinned posts\", error);\n    }\n  }, [userId, queryClient]);\n\n  const query = useQuery({\n    queryKey: [\"pinned-posts\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      // Use deduplication to prevent duplicate API calls\n      return dedupedRequest(`pinned-posts-${userId}`, async () => {\n        const posts = await getPinnedPostsByUser(supabase, 0, userId);\n\n        // Store each post in normalized cache for reuse\n        posts?.forEach((post) => {\n          normalizeEntity(\"posts\", post);\n        });\n\n        // Cache in localStorage for faster initial loading next time\n        try {\n          localStorage.setItem(\n            `pinned-posts-${userId}`,\n            JSON.stringify({\n              posts: posts || [],\n              timestamp: Date.now(),\n            })\n          );\n        } catch (error) {\n          logError(\"Error caching pinned posts\", error);\n        }\n\n        return posts || [];\n      });\n    },\n    enabled: !!userId, // Only fetch if userId is available\n    staleTime: 1000 * 60 * 5, // Cache for 5 minutes\n    gcTime: 1000 * 60 * 30, // Keep unused data for 30 minutes\n  });\n\n  // Listen for real-time updates to pinned posts\n  useEffect(() => {\n    if (!userId) return;\n\n    const channel = supabase\n      .channel(`pinned-posts-${userId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"post_pins\",\n          filter: `user_id=eq.${userId}`,\n        },\n        () => {\n          // Invalidate the pinned posts query to refetch\n          queryClient.invalidateQueries({\n            queryKey: [\"pinned-posts\", userId],\n          });\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [userId, queryClient]);\n\n  // Helper for prefetching a user's pinned posts\n  const prefetchUserPinnedPosts = useCallback(\n    (targetUserId: string) => {\n      if (!targetUserId) return;\n\n      queryClient.prefetchQuery({\n        queryKey: [\"pinned-posts\", targetUserId],\n        queryFn: () => getPinnedPostsByUser(supabase, 0, targetUserId),\n        staleTime: 1000 * 60 * 5,\n      });\n    },\n    [queryClient]\n  );\n\n  return {\n    ...query,\n    pinnedPosts: query.data || [],\n    prefetchUserPinnedPosts,\n  };\n}\n\n// Enhanced hook to check if a post is pinned\nexport function useIsPostPinned(postId: number, userId: string) {\n  const queryClient = useQueryClient();\n\n  const query = useQuery({\n    queryKey: [\"post_pinned\", postId, userId],\n    queryFn: async () => {\n      if (!postId || !userId) return false;\n\n      // Use deduplication to prevent duplicate API calls\n      return dedupedRequest(`post-pinned-${postId}-${userId}`, async () => {\n        const { data, error } = await supabase\n          .from(\"post_pins\")\n          .select(\"id\")\n          .eq(\"post_id\", postId)\n          .eq(\"user_id\", userId)\n          .single();\n\n        if (error && error.code !== \"PGRST116\") {\n          logError(\"Error checking post pin\", error);\n          return false;\n        }\n\n        return !!data;\n      });\n    },\n    enabled: !!postId && !!userId, // Only run if both values exist\n    staleTime: 1000 * 60 * 10, // Cache for 10 minutes (rarely changes)\n  });\n\n  // Realtime subscription for immediate updates\n  useEffect(() => {\n    if (!postId || !userId) return;\n\n    const channel = supabase\n      .channel(`post-pins-${postId}-${userId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"post_pins\",\n          filter: `post_id=eq.${postId} AND user_id=eq.${userId}`,\n        },\n        (payload) => {\n          // Optimistically update cache based on the event type\n          if (payload.eventType === \"INSERT\") {\n            queryClient.setQueryData([\"post_pinned\", postId, userId], true);\n          } else if (payload.eventType === \"DELETE\") {\n            queryClient.setQueryData([\"post_pinned\", postId, userId], false);\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [postId, userId, queryClient]);\n\n  // Helper to update pinned status optimistically\n  const setPinned = useCallback(\n    (isPinned: boolean) => {\n      queryClient.setQueryData([\"post_pinned\", postId, userId], isPinned);\n    },\n    [postId, userId, queryClient]\n  );\n\n  return {\n    ...query,\n    isPinned: query.data || false,\n    setPinned,\n  };\n}\n\n// Enhanced mutation hook for pinning posts\nexport function usePinPost(userId: string) {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (postId: number) => {\n      if (!postId || !userId)\n        throw new Error(\"Post ID and User ID are required\");\n\n      // First, check if post is already pinned\n      const { data: existingPin } = await supabase\n        .from(\"post_pins\")\n        .select(\"id\")\n        .eq(\"post_id\", postId)\n        .eq(\"user_id\", userId)\n        .single();\n\n      if (existingPin) return { alreadyPinned: true };\n\n      // Insert new pin\n      const { data, error } = await supabase\n        .from(\"post_pins\")\n        .insert({ post_id: postId, user_id: userId })\n        .select(\"id\")\n        .single();\n\n      if (error) throw error;\n      return { id: data.id, success: true };\n    },\n\n    onMutate: async (postId) => {\n      // Cancel any outgoing refetches to prevent them overwriting our optimistic update\n      await Promise.all([\n        queryClient.cancelQueries({\n          queryKey: [\"post_pinned\", postId, userId],\n        }),\n        queryClient.cancelQueries({ queryKey: [\"pinned-posts\", userId] }),\n      ]);\n\n      // Snapshot the previous values\n      const previousPinned = queryClient.getQueryData([\n        \"post_pinned\",\n        postId,\n        userId,\n      ]);\n      const previousPosts = queryClient.getQueryData([\"pinned-posts\", userId]);\n\n      // Update is pinned status\n      queryClient.setQueryData([\"post_pinned\", postId, userId], true);\n\n      // Also update post's is_pinned property\n      updatePostInQueries(queryClient, postId, { is_pinned: true });\n\n      // Try to get the post to add to pinned list\n      const post = queryClient.getQueryData([\"post\", postId]);\n      if (post) {\n        queryClient.setQueryData([\"pinned-posts\", userId], (old: any) =>\n          Array.isArray(old) ? [post, ...old] : [post]\n        );\n      }\n\n      return { previousPinned, previousPosts };\n    },\n\n    onError: (err, postId, context) => {\n      // Revert optimistic updates\n      if (context?.previousPinned !== undefined) {\n        queryClient.setQueryData(\n          [\"post_pinned\", postId, userId],\n          context.previousPinned\n        );\n      }\n\n      if (context?.previousPosts !== undefined) {\n        queryClient.setQueryData(\n          [\"pinned-posts\", userId],\n          context.previousPosts\n        );\n      }\n\n      // Revert post update\n      updatePostInQueries(queryClient, postId, { is_pinned: false });\n    },\n\n    onSuccess: () => {\n      // Invalidate relevant queries to ensure data consistency\n      queryClient.invalidateQueries({ queryKey: [\"pinned-posts\", userId] });\n    },\n  });\n\n  return mutation;\n}\n\n// Enhanced mutation hook for unpinning posts\nexport function useUnpinPost(userId: string) {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (postId: number) => {\n      if (!postId || !userId)\n        throw new Error(\"Post ID and User ID are required\");\n\n      const { error } = await supabase\n        .from(\"post_pins\")\n        .delete()\n        .eq(\"post_id\", postId)\n        .eq(\"user_id\", userId);\n\n      if (error) throw error;\n      return { success: true };\n    },\n\n    onMutate: async (postId) => {\n      // Cancel any outgoing refetches to prevent them overwriting our optimistic update\n      await Promise.all([\n        queryClient.cancelQueries({\n          queryKey: [\"post_pinned\", postId, userId],\n        }),\n        queryClient.cancelQueries({ queryKey: [\"pinned-posts\", userId] }),\n      ]);\n\n      // Snapshot the previous values\n      const previousPinned = queryClient.getQueryData([\n        \"post_pinned\",\n        postId,\n        userId,\n      ]);\n      const previousPosts = queryClient.getQueryData([\"pinned-posts\", userId]);\n\n      // Update is pinned status\n      queryClient.setQueryData([\"post_pinned\", postId, userId], false);\n\n      // Also update post's is_pinned property\n      updatePostInQueries(queryClient, postId, { is_pinned: false });\n\n      // Remove from pinned list\n      queryClient.setQueryData([\"pinned-posts\", userId], (old: any) =>\n        Array.isArray(old) ? old.filter((post: any) => post.id !== postId) : []\n      );\n\n      return { previousPinned, previousPosts };\n    },\n\n    onError: (err, postId, context) => {\n      // Revert optimistic updates\n      if (context?.previousPinned !== undefined) {\n        queryClient.setQueryData(\n          [\"post_pinned\", postId, userId],\n          context.previousPinned\n        );\n      }\n\n      if (context?.previousPosts !== undefined) {\n        queryClient.setQueryData(\n          [\"pinned-posts\", userId],\n          context.previousPosts\n        );\n      }\n\n      // Revert post update\n      updatePostInQueries(queryClient, postId, { is_pinned: true });\n    },\n\n    onSuccess: () => {\n      // Invalidate relevant queries to ensure data consistency\n      queryClient.invalidateQueries({ queryKey: [\"pinned-posts\", userId] });\n    },\n  });\n\n  return mutation;\n}\n","import { Client } from \"$/supabase/client\";\nimport { Like } from \"$/types/data.types\";\nimport { logError } from \"@/utils/sentryUtils\";\n\nexport const getPostLikes = async (\n  postId: number,\n  client: Client\n): Promise<Like[] | null> => {\n  const { data, error } = await client\n    .from(\"likes\")\n    .select(\"*\")\n    .eq(\"post_id\", postId);\n\n  if (error) {\n    logError(\"Error fetching post likes\", error);\n    return null;\n  }\n\n  return data;\n};\n","import { Client } from \"$/supabase/client\";\nimport { getPostLikes } from \"@/queries/post/getPostLikes\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { dedupedRequest } from \"@/utils/queryOptimizer\";\nimport { useCallback } from \"react\";\nimport { log, logError } from \"@/utils/sentryUtils\";\n\n// Define a local interface for Like to avoid type conflicts\ninterface PostLike {\n  id: string | number;\n  post_id: number;\n  author: string | null;\n  created_at: string;\n}\n\n/**\n * Enhanced hook for fetching post likes with optimized caching\n * and support for optimistic updates\n */\nexport const usePostLikes = (postId: number, client: Client) => {\n  const queryClient = useQueryClient();\n\n  const result = useQuery<PostLike[]>({\n    queryKey: [\"postLikes\", postId],\n    queryFn: async () => {\n      if (!postId) return [];\n\n      // Use request deduplication to prevent duplicate API calls\n      const likes = await dedupedRequest(`postLikes-${postId}`, async () => {\n        const likesData = await getPostLikes(postId, client);\n        if (!likesData) throw new Error(\"Failed to fetch likes\");\n        return likesData;\n      });\n\n      // Convert to our local interface to ensure type safety\n      return likes.map((like) => ({\n        id: like.id,\n        post_id: postId, // Ensure this is always a number\n        author: like.author,\n        created_at: like.created_at,\n      }));\n    },\n    staleTime: 1000 * 60 * 2, // Cache for 2 minutes\n    gcTime: 1000 * 60 * 10, // Keep in cache for 10 minutes\n    enabled: !!postId,\n  });\n\n  // Optimistically add a like\n  const addLike = useCallback(\n    (userId: string) => {\n      if (!postId || !userId) return;\n\n      // Check if already liked to prevent duplicates\n      const currentLikes =\n        queryClient.getQueryData<PostLike[]>([\"postLikes\", postId]) || [];\n      const alreadyLiked = currentLikes.some((like) => like.author === userId);\n\n      if (alreadyLiked) return;\n\n      // Add optimistic like\n      const newLike: PostLike = {\n        id: `temp-${Date.now()}`,\n        post_id: postId,\n        author: userId,\n        created_at: new Date().toISOString(),\n      };\n\n      queryClient.setQueryData<PostLike[]>(\n        [\"postLikes\", postId],\n        (oldLikes = []) => [...oldLikes, newLike]\n      );\n\n      // Update like count on the post\n      queryClient.setQueryData([\"post\", postId], (oldPost: any) => {\n        if (!oldPost) return oldPost;\n        return {\n          ...oldPost,\n          like_count: (oldPost.like_count || 0) + 1,\n          is_liked_by_user: true,\n        };\n      });\n    },\n    [postId, queryClient]\n  );\n\n  // Optimistically remove a like\n  const removeLike = useCallback(\n    (userId: string) => {\n      if (!postId || !userId) return;\n\n      queryClient.setQueryData<PostLike[]>(\n        [\"postLikes\", postId],\n        (oldLikes = []) => oldLikes.filter((like) => like.author !== userId)\n      );\n\n      // Update like count on the post\n      queryClient.setQueryData([\"post\", postId], (oldPost: any) => {\n        if (!oldPost) return oldPost;\n        return {\n          ...oldPost,\n          like_count: Math.max(0, (oldPost.like_count || 0) - 1),\n          is_liked_by_user: false,\n        };\n      });\n    },\n    [postId, queryClient]\n  );\n\n  // Helper to check if a user has liked the post\n  const hasUserLiked = useCallback(\n    (userId: string) => {\n      const likes = result.data || [];\n      return likes.some((like) => like.author === userId);\n    },\n    [result.data]\n  );\n\n  // Refresh likes data\n  const refreshLikes = useCallback(() => {\n    if (!postId) return;\n\n    queryClient.invalidateQueries({\n      queryKey: [\"postLikes\", postId],\n      exact: true,\n    });\n  }, [postId, queryClient]);\n\n  return {\n    ...result,\n    likes: result.data || [],\n    likesCount: (result.data || []).length,\n    addLike,\n    removeLike,\n    hasUserLiked,\n    refreshLikes,\n  };\n};\n","import { supabase } from \"$/supabase/client\";\nimport { addNotification } from \"./addNotification\";\nimport { log, logError } from \"@/utils/sentryUtils\";\n\nexport async function likePost(\n  postId: number,\n  userId: string,\n  postAuthor: string\n) {\n  try {\n    // Check if a like already exists\n    const { data: existingLike, error: fetchError } = await supabase\n      .from(\"likes\")\n      .select(\"*\")\n      .eq(\"author\", userId)\n      .eq(\"post_id\", postId)\n      .single(); // Fetch only one record\n\n    if (fetchError && fetchError.code !== \"PGRST116\") {\n      // Ignore 'not found' errors (code PGRST116 indicates no rows found)\n      logError(\"Error fetching like\", fetchError);\n      return false;\n    }\n\n    if (existingLike) {\n      // Like exists, delete it\n      const { error: deleteError } = await supabase\n        .from(\"likes\")\n        .delete()\n        .eq(\"id\", existingLike.id); // Delete by primary key\n\n      if (deleteError) {\n        logError(\"Error deleting like\", deleteError);\n        return false;\n      }\n    } else {\n      // Like does not exist, add it\n      const { error: insertError } = await supabase.from(\"likes\").insert([\n        {\n          author: userId,\n          post_id: postId,\n          post_author: postAuthor,\n        },\n      ]);\n\n      if (insertError) {\n        logError(\"Error adding like\", insertError);\n        return false;\n      }\n\n      //add notifications\n      await addNotification({\n        userId: postAuthor,\n        senderId: userId,\n        postId,\n        type: \"like\",\n      });\n    }\n\n    return true;\n  } catch (err) {\n    logError(\"An unexpected error occurred\", err);\n    return false;\n  }\n}\n","import { supabase } from \"$/supabase/client\";\nimport { Like } from \"$/types/data.types\";\nimport { likePost } from \"@/queries/post/likePost\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { updatePostInQueries } from \"@/utils/queryOptimizer\";\nimport { useCallback } from \"react\";\nimport { logError } from \"@/utils/sentryUtils\";\n\nexport const useLikePost = (\n  postId: number,\n  userId: string | null,\n  postAuthor: string\n) => {\n  const queryClient = useQueryClient();\n\n  // Memoized like togglers for performance\n  const optimisticallyToggleLike = useCallback(\n    (isAdding: boolean) => {\n      // Update post like count\n      updatePostInQueries(queryClient, postId, {\n        like_count: (old: any) => {\n          const currentCount = old?.like_count || 0;\n          return isAdding ? currentCount + 1 : Math.max(0, currentCount - 1);\n        },\n        // Track if current user has liked\n        is_liked_by_user: isAdding,\n      });\n\n      // Update likes list for the post\n      queryClient.setQueryData(\n        [\"postLikes\", postId],\n        (oldLikes: Like[] = []) => {\n          if (isAdding) {\n            // Don't add duplicate likes\n            if (oldLikes.some((like) => like.author === userId)) {\n              return oldLikes;\n            }\n            return [\n              ...oldLikes,\n              { id: `temp-${Date.now()}`, author: userId, post_id: postId },\n            ];\n          } else {\n            // Remove this user's like\n            return oldLikes.filter((like) => like.author !== userId);\n          }\n        }\n      );\n    },\n    [queryClient, postId, userId]\n  );\n\n  return useMutation({\n    mutationFn: async () => {\n      // If userId is not provided, fetch it\n      let effectiveUserId = userId;\n      if (!effectiveUserId) {\n        const { data, error } = await supabase.auth.getUser();\n        if (error || !data?.user?.id) {\n          throw new Error(\"User ID is required to like a post.\");\n        }\n        effectiveUserId = data.user.id; // Assign fetched userId\n      }\n\n      return await likePost(postId, effectiveUserId, postAuthor);\n    },\n\n    onMutate: async () => {\n      // Cancel any outgoing refetches to avoid overwriting our optimistic update\n      await Promise.all([\n        queryClient.cancelQueries({ queryKey: [\"postLikes\", postId] }),\n        queryClient.cancelQueries({ queryKey: [\"post\", postId] }),\n      ]);\n\n      // Snapshot previous values for rollback\n      const previousLikes = queryClient.getQueryData<Like[]>([\n        \"postLikes\",\n        postId,\n      ]);\n      const previousPost = queryClient.getQueryData([\"post\", postId]);\n\n      // Check if post is already liked\n      const isLiked = previousLikes?.some((like) => like.author === userId);\n\n      // Update optimistically\n      optimisticallyToggleLike(!isLiked);\n\n      return { previousLikes, previousPost, isLiked };\n    },\n\n    onError: (err, _, context) => {\n      logError(\"Error toggling like\", err);\n\n      // Rollback to previous state\n      if (context?.previousLikes) {\n        queryClient.setQueryData([\"postLikes\", postId], context.previousLikes);\n      }\n\n      if (context?.previousPost) {\n        queryClient.setQueryData([\"post\", postId], context.previousPost);\n      }\n\n      // Roll back our optimistic update\n      if (context?.isLiked !== undefined) {\n        optimisticallyToggleLike(context.isLiked);\n      }\n    },\n\n    onSuccess: (result) => {\n      // Update with server data to ensure consistency\n      // but maintain our optimistic updates for faster UI response\n\n      // Selectively update posts that contain this post\n      queryClient.invalidateQueries({\n        queryKey: [\"post\", postId],\n        exact: true,\n      });\n\n      // Ensure like list is up-to-date\n      queryClient.invalidateQueries({\n        queryKey: [\"postLikes\", postId],\n        exact: true,\n      });\n    },\n  });\n};\n","\"use client\";\nimport Image from \"next/image\";\nimport ModalWrapper from \"./modalWrapper\";\nimport { Post } from \"$/types/data.types\";\nimport { addNotification } from \"@/queries/post/addNotification\";\nimport {\n  FacebookShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n} from \"react-share\";\nimport { toast } from \"sonner\";\nimport { useCountShareNotifications } from \"@/hooks/useNotifications\";\n\ninterface ShareModalProps {\n  link: string;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  userId?: string;\n  post?: Post;\n  isProfile?: boolean;\n}\n\nexport default function ShareModal({\n  link,\n  open,\n  setOpen,\n  post,\n  userId,\n  isProfile,\n}: ShareModalProps) {\n  const { incrementShareCount } = post?.id\n    ? useCountShareNotifications(post.id)\n    : { incrementShareCount: () => {} };\n\n  const copyToClipboard = () => {\n    navigator.clipboard\n      .writeText(link)\n      .then(() => {\n        console.log(\"Link copied to clipboard!\");\n        toast(\"copied\");\n      })\n      .catch((err) => {\n        console.error(\"Failed to copy: \", err);\n      });\n  };\n\n  // const shareOnX = () => {\n  //   //no notification for profile share\n  //   if (!isProfile) {\n  //     addNotification({\n  //       userId: post?.author as string,\n  //       senderId: userId as string,\n  //       postId: post?.id as number,\n  //       type: \"share\",\n  //     });\n  //   }\n  //   const url = `https://x.com/share?url=${encodeURIComponent(link)}`;\n  //   window.open(url, \"_blank\");\n  // };\n\n  const shareOnDiscord = () => {\n    //no notification for profile share\n    if (!isProfile && post?.id) {\n      addNotification({\n        userId: post?.author as string,\n        senderId: userId as string,\n        postId: post?.id as number,\n        type: \"share\",\n      });\n      // Immediately increment the share count for better UX\n      incrementShareCount();\n    }\n    const url = `https://discord.com/channels/@me?url=${encodeURIComponent(\n      link,\n    )}`;\n    window.open(url, \"_blank\");\n  };\n\n  // const shareOnFacebook = () => {\n  //   //no notification for profile share\n  //   if (!isProfile) {\n  //     addNotification({\n  //       userId: post?.author as string,\n  //       senderId: userId as string,\n  //       postId: post?.id as number,\n  //       type: \"share\",\n  //     });\n  //   }\n  //   const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(\n  //     link,\n  //   )}`;\n  //   window.open(url, \"_blank\");\n  // };\n\n  // const shareOnLinkedIn = () => {\n  //   //no notification for profile share\n  //   if (!isProfile) {\n  //     addNotification({\n  //       userId: post?.author as string,\n  //       senderId: userId as string,\n  //       postId: post?.id as number,\n  //       type: \"share\",\n  //     });\n  //   }\n  //   const url = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(\n  //     link,\n  //   )}`;\n  //   window.open(url, \"_blank\");\n  // };\n\n  return (\n    <ModalWrapper title={\"Share\"} open={open} setOpen={setOpen}>\n      <div>\n        <input\n          className=\"w-full bg-primary-13 rounded-full text-primary-6 py-2 px-4 outline-none\"\n          type=\"text\"\n          value={link}\n          readOnly\n        />\n\n        <div className=\"flex justify-evenly items-center  bg-primary-10 h-[104px] rounded-[20] mt-6\">\n          <div className=\"border-r-[1px]\">\n            <ShareItem\n              image=\"copy.png\"\n              text=\"Copy link\"\n              onClick={copyToClipboard}\n            />\n          </div>\n\n          <ShareItem\n            image=\"discord.png\"\n            text=\"Discord\"\n            onClick={shareOnDiscord}\n          />\n\n          <TwitterShareButton url={link} title=\"ok\">\n            <ShareItem\n              image=\"x.png\"\n              text=\"Xapp\"\n              onClick={() => {\n                if (!isProfile && post?.id) {\n                  addNotification({\n                    userId: post?.author as string,\n                    senderId: userId as string,\n                    postId: post?.id as number,\n                    type: \"share\",\n                  });\n                  // Immediately increment the share count\n                  incrementShareCount();\n                }\n              }}\n            />\n          </TwitterShareButton>\n          <FacebookShareButton url={link} title=\"ok\">\n            <ShareItem\n              image=\"facebook.png\"\n              text=\"Facebook\"\n              onClick={() => {\n                if (!isProfile && post?.id) {\n                  addNotification({\n                    userId: post?.author as string,\n                    senderId: userId as string,\n                    postId: post?.id as number,\n                    type: \"share\",\n                  });\n                  // Immediately increment the share count\n                  incrementShareCount();\n                }\n              }}\n            />\n          </FacebookShareButton>\n          <LinkedinShareButton url={link} title=\"ok\">\n            <ShareItem\n              image=\"linkedin.png\"\n              text=\"LinkedIn\"\n              onClick={() => {\n                if (!isProfile && post?.id) {\n                  addNotification({\n                    userId: post?.author as string,\n                    senderId: userId as string,\n                    postId: post?.id as number,\n                    type: \"share\",\n                  });\n                  // Immediately increment the share count\n                  incrementShareCount();\n                }\n              }}\n            />\n          </LinkedinShareButton>\n        </div>\n      </div>\n    </ModalWrapper>\n  );\n}\n\nfunction ShareItem({\n  image,\n  text,\n  onClick,\n}: {\n  image: string;\n  text: string;\n  onClick?: () => void;\n}) {\n  return (\n    <span\n      onClick={onClick}\n      className={`flex items-center cursor-pointer justify-between flex-col px-2  h-14 ${\n        image === \"x.png\" ? \"pt-2\" : \"\"\n      } `}\n    >\n      <Image\n        src={\"/icons/\" + image}\n        width={image === \"x.png\" ? 27 : 36}\n        height={image === \"x.png\" ? 27 : 36}\n        alt=\"\"\n      />\n\n      <p className={`text-primary-6 text-sm`}>{text}</p>\n    </span>\n  );\n}\n","import { supabase } from \"$/supabase/client\";\nimport { logError } from \"@/utils/sentryUtils\";\n\n// Add notification\nexport const addNotification = async ({\n  userId,\n  postId,\n  type,\n  senderId,\n}: {\n  userId: string; // User to receive the notification\n  postId: number; // The post the notification is about\n  type: \"like\" | \"comment\" | \"follow\" | \"share\"; // Notification type\n  senderId: string; // User who performed the action\n}) => {\n  // Don't add notification if user is sending to self\n  if (userId === senderId) return;\n\n  const { data, error } = await supabase.from(\"notifications\").insert([\n    {\n      user_id: userId,\n      post_id: postId,\n      type,\n      sender_id: senderId,\n    },\n  ]);\n\n  if (error) logError(\"Error adding notification\", error);\n  return data;\n};\n","\"use client\";\nimport { ReactNode, useState } from \"react\";\nimport {\n  DownloadIcon,\n  PinFillIcon,\n  PinIcon,\n  ShareIcon,\n  UserIcon,\n} from \"../../components/icons\";\nimport { useUser } from \"@/hooks/useUser\";\nimport { IPhoto } from \"@/app/libs/interfaces\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  useIsPostPinned,\n  usePinPost,\n  useUnpinPost,\n} from \"@/hooks/usePinnedPosts\";\nimport { downloadImage } from \"@/utils\";\nimport { Post } from \"$/types/data.types\";\nimport Link from \"next/link\";\nimport { usePost } from \"@/hooks/usePost\";\nimport ShareModal from \"./modals/shareModal\";\nimport { toast } from \"sonner\";\n\ninterface ImageOptionMenuProps {\n  children: ReactNode;\n  image: IPhoto;\n  postId?: string;\n}\n\nexport default function ImageOptionMenu({\n  children,\n  image,\n  postId,\n}: ImageOptionMenuProps) {\n  const { userId } = useUser();\n  const [open, setOpen] = useState(false);\n  const [openShare, setOpenShare] = useState(false);\n\n  const router = useRouter();\n\n  const { isPinned, setPinned } = useIsPostPinned(\n    Number(postId),\n    userId as string\n  );\n  const { data: post } = usePost(Number(postId));\n  const pinPostMutation = usePinPost(userId as string);\n  const unpinPostMutation = useUnpinPost(userId as string);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handlePrompt = () => {\n    router.push(\"/home/photo/\" + image.id);\n    handleClose();\n  };\n\n  const handleCreator = () => {\n    router.push(\"/home/profile/\" + image.author);\n    handleClose();\n  };\n\n  const togglePostPin = () => {\n    if (!userId || !postId) return;\n\n    setPinned(!isPinned);\n\n    if (!isPinned) {\n      pinPostMutation.mutate(Number(postId), {\n        onError: (error) => {\n          setPinned(false);\n          toast.error(`Failed to pin post: ${error.message}`);\n        },\n      });\n    } else {\n      unpinPostMutation.mutate(Number(postId), {\n        onError: (error) => {\n          setPinned(true);\n          toast.error(`Failed to unpin post: ${error.message}`);\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"relative\">\n      <button className=\"\" onClick={() => setOpen(true)}>\n        {children}\n      </button>\n\n      {open && (\n        <>\n          <div\n            onClick={() => setOpen(false)}\n            className=\"fixed z-50  top-0 left-0 h-screen w-full\"\n          ></div>\n\n          <div className=\"absolute w-[180px] xl:w-[240px] z-50 top-2 md:top-6 right-1 xl:right-0 border-primary-8 border-[1px] bg-[#191919] bg-primary-12 rounded-lg\">\n            {/* <MenuItem onClick={handlePrompt} icon={<PromptIcon width={16} height={16} color=\"#8F8F8F\" />} text=\"Prompt\" underlineOff={true} /> */}\n\n            {/* <MenuItem onClick={handleClose} icon={<NoteIcon width={16} height={16} color=\"#8F8F8F\" />} text=\"Upscale\" /> */}\n\n            <MenuItem\n              onClick={togglePostPin}\n              icon={\n                isPinned ? (\n                  <PinFillIcon width={16} height={16} color=\"#F0F0F0\" />\n                ) : (\n                  <PinIcon width={16} height={16} color=\"#8F8F8F\" />\n                )\n              }\n              text={isPinned ? \"Unpin\" : \"Pin\"}\n              underlineOff={true}\n            />\n\n            <MenuItem\n              onClick={() => {\n                console.log(image);\n                if (!image.src) {\n                  handleClose();\n                  return;\n                }\n                downloadImage(image.src);\n                handleClose();\n              }}\n              icon={<DownloadIcon width={16} height={16} color=\"#8F8F8F\" />}\n              text=\"Download JPEG\"\n              underlineOff={true}\n            />\n\n            {post && userId && (\n              <MenuItem\n                onClick={() => {\n                  setOpenShare(true);\n                  handleClose();\n                }}\n                icon={<ShareIcon width={16} height={16} color=\"#8F8F8F\" />}\n                text=\"Share\"\n              />\n            )}\n\n            <Link href={\"/home/profile/\" + image.author}>\n              <MenuItem\n                onClick={handleCreator}\n                icon={<UserIcon width={16} height={16} color=\"#8F8F8F\" />}\n                text=\"Go to creator profile\"\n                underlineOff={true}\n              />\n            </Link>\n            {/* <MenuItem\n              onClick={handleClose}\n              icon={<FlagIcon width={16} height={16} color=\"#FDA29B\" />}\n              text=\"Report post\"\n              color={\"#FDA29B\"}\n            /> */}\n          </div>\n        </>\n      )}\n\n      {post && userId && openShare && (\n        <div className=\"fixed z-50 top-0 left-0 h-screen w-full\">\n          {\" \"}\n          <ShareModal\n            open={openShare}\n            post={post as Post}\n            userId={userId as string}\n            setOpen={setOpenShare}\n            link={\"https://unreal.art/home/photo/\" + postId}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n// export function MenuItem({ icon, text, underlineOff, action, color, onClick } : { icon: ReactNode, text: string, color?: string, onClick?: () => void,  underlineOff?: boolean, action?: ReactNode }) {\n//   const handlePrompt = () => {\n//     router.push(\"/home/photo/\" + image.id);\n//     handleClose();\n//   };\n\n//   return (\n//     <div className=\"relative flex\">\n//       <button className=\" self-end\" onClick={() => setOpen(true)}>\n//         {children}\n//       </button>\n\n//       {open && (\n//         <>\n//           <div\n//             onClick={() => setOpen(false)}\n//             className=\"fixed z-50  top-0 left-0 h-screen w-full\"\n//           ></div>\n\n//           <div className=\"absolute w-[240px] z-50 top-2 md:top-6 right-0 border-primary-8 border-[1px] bg-[#191919] bg-primary-12 rounded-lg\">\n//             <MenuItem\n//               onClick={handlePrompt}\n//               icon={<PromptIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Prompt\"\n//               underlineOff={true}\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<NoteIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Upscale\"\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<PinIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Pin\"\n//               underlineOff={true}\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<DownloadIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Download JPEG\"\n//               underlineOff={true}\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<ShareIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Share\"\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<UserIcon width={16} height={16} color=\"#8F8F8F\" />}\n//               text=\"Go to creator profile\"\n//             />\n\n//             <MenuItem\n//               onClick={handleClose}\n//               icon={<FlagIcon width={16} height={16} color=\"#FDA29B\" />}\n//               text=\"Report post\"\n//               color={\"#FDA29B\"}\n//             />\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\nexport function MenuItem({\n  icon,\n  text,\n  underlineOff,\n  action,\n  color,\n  onClick,\n}: {\n  icon: ReactNode;\n  text: string;\n  color?: string;\n  onClick?: () => void;\n  underlineOff?: boolean;\n  action?: ReactNode;\n}) {\n  return (\n    <div\n      style={{ color }}\n      onClick={onClick}\n      className={`flex justify-between py-2 px-4 border-primary-8 text-primary-6 h-10 cursor-pointer ${\n        !underlineOff ? \"border-b-[1px]\" : \"\"\n      }`}\n    >\n      <div className=\"flex gap-2 items-center justify-center text-sm md:text-base\">\n        <div>{icon}</div>\n        <p>{text}</p>\n      </div>\n      {action}\n    </div>\n  );\n}\n\n//#FDA29B\n"],"names":["MD_BREAKPOINT","POST_GROUPS","useComments","postId","queryClient","useQueryClient","page","setPage","useState","result","useQuery","queryKey","pageSize","queryFn","dedupedRequest","data","axiosInstanceLocal","get","forEach","comment","normalizeEntity","user","staleTime","placeholderData","prev","loadMoreComments","useCallback","isLoading","isFetching","prefetchNextPage","prefetchQuery","hasMore","Array","isArray","length","useReplies","parentId","reply","usePostComment","useMutation","mutationFn","axios","post","addNotification","userId","author","parseInt","post_id","type","senderId","onMutate","newComment","parent_id","cancelQueries","previousData","getQueryData","optimisticComment","id","Date","now","content","created_at","toISOString","likes","setQueryData","old","onError","err","context","onSuccess","variables","comment_count","invalidateQueries","useRealtimeComments","useRealtimeReplies","useLikeComment","commentId","comment_id","previousComments","oldData","like_count","user_liked","_err","_commentId","logError","onSettled","useUnlikeComment","delete","Math","max","useLikeReply","useUnlikeReply","map","ModalWrapper","open","title","titleColor","children","setOpen","handleClose","div","onClick","className","p","style","color","button","CloseIcon","width","height","getPostsByUser","client","start","range","getRange","LIST_LIMIT","error","userError","userData","auth","getUser","from","select","eq","neq","order","ascending","message","ipfsImages","JSON","parse","getPrivatePostsByUser","getPinnedPostsByUser","Error","filter","posts","category","getIsDraftPostsByUser","getUserLikedPosts","flatMap","like","useIsPostPinned","query","supabase","single","code","enabled","setPinned","isPinned","usePinPost","existingPin","alreadyPinned","insert","user_id","success","Promise","all","previousPinned","previousPosts","updatePostInQueries","is_pinned","undefined","useUnpinPost","getPostLikes","usePostLikes","likesData","gcTime","addLike","some","newLike","oldLikes","oldPost","is_liked_by_user","removeLike","hasUserLiked","refreshLikes","exact","likesCount","likePost","postAuthor","existingLike","fetchError","deleteError","insertError","post_author","useLikePost","optimisticallyToggleLike","currentCount","isAdding","effectiveUserId","previousLikes","previousPost","isLiked","_","ShareModal","link","isProfile","incrementShareCount","useCountShareNotifications","input","value","readOnly","ShareItem","image","text","copyToClipboard","navigator","clipboard","writeText","then","console","log","toast","catch","shareOnDiscord","url","encodeURIComponent","window","TwitterShareButton","FacebookShareButton","LinkedinShareButton","span","Image","src","alt","sender_id","ImageOptionMenu","useUser","openShare","setOpenShare","router","useRouter","Number","usePost","pinPostMutation","unpinPostMutation","MenuItem","togglePostPin","mutate","icon","PinFillIcon","PinIcon","underlineOff","downloadImage","DownloadIcon","ShareIcon","Link","href","handleCreator","push","UserIcon","action"],"sourceRoot":""}