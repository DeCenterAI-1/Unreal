try{let e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},a=(new e.Error).stack;a&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[a]="6b7b3e8c-3402-4c5e-a2e3-c11eeb089838",e._sentryDebugIdIdentifier="sentry-dbid-6b7b3e8c-3402-4c5e-a2e3-c11eeb089838")}catch(e){}"use strict";exports.id=42558,exports.ids=[42558],exports.modules={42558:(e,a,t)=>{t.d(a,{relayEngineTransaction:()=>l});var r=t(98598),n=t(10907),s=t(3373),i=t(82);async function o({account:e,serializableTransaction:a,transaction:t,gasless:n}){let i=(0,r.P)({address:n.relayerForwarderAddress,chain:t.chain,client:t.client}),o=await (0,s.readContract)({contract:i,method:"function getNonce(address) view returns (uint256)",params:[e.address]}),[l,u]=await (async()=>{if(!a.to)throw Error("engine transactions must have a 'to' address");if(!a.gas)throw Error("engine transactions must have a 'gas' value");if(!a.data)throw Error("engine transactions must have a 'data' value");if(n.experimentalChainlessSupport){let r={from:e.address,to:a.to,value:0n,gas:a.gas,nonce:o,data:a.data,chainid:BigInt(t.chain.id)};return[await e.signTypedData({domain:{name:"GSNv2 Forwarder",version:"0.0.1",verifyingContract:i.address},message:r,primaryType:"ForwardRequest",types:{ForwardRequest:c}}),r]}let r={from:e.address,to:a.to,value:0n,gas:a.gas,nonce:o,data:a.data};return[await e.signTypedData({domain:{name:n.domainName??"GSNv2 Forwarder",version:n.domainVersion??"0.0.1",chainId:t.chain.id,verifyingContract:i.address},message:r,primaryType:"ForwardRequest",types:{ForwardRequest:d}}),r]})();return{message:u,signature:l,messageType:"forward"}}let d=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],c=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}];async function l(e){let{message:a,messageType:t,signature:r}=await o(e),s=await fetch(e.gasless.relayerUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:(0,n.A)({request:a,type:t,signature:r,forwarderAddress:e.gasless.relayerForwarderAddress})});if(!s.ok)throw Error(`Failed to send transaction: ${await s.text()}`);let i=await s.json();if(!i.result)throw Error(`Relay transaction failed: ${i.message}`);let d=i.result.queueId,c=Date.now()+6e4;for(;Date.now()<c;){let a=await u({options:e,queueId:d});if(a)return{transactionHash:a.transactionHash,chain:e.transaction.chain,client:e.transaction.client};await new Promise(e=>setTimeout(e,1e3))}throw Error("Failed to find relayed transaction after 60000ms")}async function u(e){let{options:a,queueId:t}=e,r=a.gasless.relayerUrl.split("/relayer/")[0],n=await fetch(`${r}/transaction/status/${t}`,{method:"GET"}),s=await n.json();if(!n.ok)return null;let o=s.result;if(!o)return null;switch(o.status){case"errored":throw Error(`Transaction errored with reason: ${o.errorMessage}`);case"cancelled":throw Error("Transaction execution cancelled.");case"mined":return await (0,i.L)({client:a.transaction.client,chain:a.transaction.chain,transactionHash:o.transactionHash});default:return null}}}};
//# sourceMappingURL=42558.js.map