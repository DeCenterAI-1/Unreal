{"version":3,"file":"83296.js","mappings":"0eCgBO,oBACP,YAAY,aAAmB,EAI/B,OACA,UAJA,qBACA,QDbO,YAGP,MCUmC,CDXnC,GAAsB,UAAgB,iCAAiC,WAAW,MAClF,sBACA,+BACA,aACA,UAEA,SACA,UACA,cAAiC,MAAY,EAC7C,SACA,CACA,kBAAqC,UAAgB,EAErD,GADA,UACA,YACA,mBAAwC,WAAiB,OACzD,SACA,CACA,gBAAiC,QAAc,EAC/C,UACA,oBAAwC,YAAkB,EAC1D,UACA,0BAA4C,kBAAwB,EAEpE,GADA,UACA,kBACA,qBAAkD,iBAAuB,EACzE,SACA,CAKA,OAJA,aACA,gDAA6E,EAAE,gBAG/E,GADA,aACA,WACA,ECrBmC,EACnC,CAAK,EAGL,SACA,CACA","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/auth/core/create-login-message.js","webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/auth/core/sign-login-payload.js"],"sourcesContent":["/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n * @param payload - The login payload containing the necessary information.\n * @returns The generated login message.\n * @internal\n */\nexport function createLoginMessage(payload) {\n    const typeField = \"Ethereum\";\n    const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n    let prefix = [header, payload.address].join(\"\\n\");\n    prefix = [prefix, payload.statement].join(\"\\n\\n\");\n    if (payload.statement) {\n        prefix += \"\\n\";\n    }\n    const suffixArray = [];\n    if (payload.uri) {\n        const uriField = `URI: ${payload.uri}`;\n        suffixArray.push(uriField);\n    }\n    const versionField = `Version: ${payload.version}`;\n    suffixArray.push(versionField);\n    if (payload.chain_id) {\n        const chainField = `Chain ID: ${payload.chain_id}` || \"1\";\n        suffixArray.push(chainField);\n    }\n    const nonceField = `Nonce: ${payload.nonce}`;\n    suffixArray.push(nonceField);\n    const issuedAtField = `Issued At: ${payload.issued_at}`;\n    suffixArray.push(issuedAtField);\n    const expiryField = `Expiration Time: ${payload.expiration_time}`;\n    suffixArray.push(expiryField);\n    if (payload.invalid_before) {\n        const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n        suffixArray.push(invalidBeforeField);\n    }\n    if (payload.resources) {\n        suffixArray.push([\"Resources:\", ...payload.resources.map((x) => `- ${x}`)].join(\"\\n\"));\n    }\n    const suffix = suffixArray.join(\"\\n\");\n    return [prefix, suffix].join(\"\\n\");\n}\n//# sourceMappingURL=create-login-message.js.map","import { createLoginMessage } from \"./create-login-message.js\";\n/**\n * Signs the login payload using the provided account.\n * @param options - The options for signing the login payload.\n * @returns An object containing the signature and the payload.\n * @example\n * ```ts\n * import { signLoginPayload } from 'thirdweb/auth';\n *\n * const { signature, payload } = await signLoginPayload({\n *  payload: loginPayload,\n *  account: account,\n * });\n * ```\n * @auth\n */\nexport async function signLoginPayload(options) {\n    const { payload, account } = options;\n    const signature = await account.signMessage({\n        message: createLoginMessage(payload),\n    });\n    return {\n        signature,\n        payload,\n    };\n}\n//# sourceMappingURL=sign-login-payload.js.map"],"names":[],"sourceRoot":""}