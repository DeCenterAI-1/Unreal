{"version":3,"file":"32558.js","mappings":"8gBAIO,0BACP,GAAQ,GAAO,CACf,MAAe,OAAgB,IAG/B,YAAsB,QAAc,eAAoB,QAAkB,WAAW,eACrF,cACA,QAHA,GAIA,OACA,iEACA,CAAK,EACL,UAEA,GADA,iBACA,eACA,6EAEA,kBACA,qHAEA,kBACA,yEAEA,iDAA4D,UAAY,IAAI,aAAe,EAC3F,CAEA,MADA,iBACA,SACA,MACA,+DAEA,0BACA,WAA0B,EAAI,GAE9B,mBAA6C,EAAI,GAAG,EAAK,EACzD","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/storage/upload/web-node.js"],"sourcesContent":["import { getThirdwebDomains } from \"../../utils/domains.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { IS_TEST } from \"../../utils/process.js\";\nimport { addToMockStorage } from \"../mock.js\";\nexport async function uploadBatch(client, form, fileNames, options) {\n    if (IS_TEST) {\n        return addToMockStorage(form);\n    }\n    const headers = {};\n    const res = await getClientFetch(client)(`https://${getThirdwebDomains().storage}/ipfs/upload`, {\n        method: \"POST\",\n        headers,\n        body: form,\n        requestTimeoutMs: client.config?.storage?.fetch?.requestTimeoutMs || 120000,\n    });\n    if (!res.ok) {\n        res.body?.cancel();\n        if (res.status === 401) {\n            throw new Error(\"Unauthorized - You don't have permission to use this service.\");\n        }\n        if (res.status === 402) {\n            throw new Error(\"You have reached your storage limit. Please add a valid payment method to continue using the service.\");\n        }\n        if (res.status === 403) {\n            throw new Error(\"Forbidden - You don't have permission to use this service.\");\n        }\n        throw new Error(`Failed to upload files to IPFS - ${res.status} - ${res.statusText}`);\n    }\n    const body = await res.json();\n    const cid = body.IpfsHash;\n    if (!cid) {\n        throw new Error(\"Failed to upload files to IPFS - Bad CID\");\n    }\n    if (options?.uploadWithoutDirectory) {\n        return [`ipfs://${cid}`];\n    }\n    return fileNames.map((name) => `ipfs://${cid}/${name}`);\n}\n//# sourceMappingURL=web-node.js.map"],"names":[],"sourceRoot":""}