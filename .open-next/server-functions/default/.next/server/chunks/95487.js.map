{"version":3,"file":"95487.js","mappings":"uiBAUO,wBAMP,EALA,WAAY,sDAAsD,eAAqB,oBAA8B,CAAG,aAAc,EACtI,iBACA,MACA,uDAGA,IACA,iBACA,oBAEA,EADA,iBACA,uBACA,UACA,eACA,CAAqB,EAGrB,MAAmC,OAAiB,EACpD,UACA,gBACqB,EAErB,KAEA,gBAEA,EADA,YACA,kBACA,UACA,gBACqB,EAGrB,MAAmC,OAAiB,EACpD,UACA,gBACqB,EAErB,KAEA,yBAEA,EADA,qBACA,2BACA,UACA,gBACqB,EAGrB,MAAmC,OAA0B,EAC7D,UACA,gBACqB,EAErB,KAEA,4BAEA,EADA,wBACA,8BACA,UACA,gBACqB,EAGrB,MAAmC,OAA0B,EAC7D,UACA,gBACqB,EAErB,KAEA,2BAEA,EADA,uBACA,6BACA,UACA,gBACqB,EAGrB,MAAmC,OAA4B,EAC/D,UACA,gBACqB,EAErB,KAEA,4BACA,MAAgC,OAAkB,IAElD,EADA,uBACA,6BACA,UACA,UACA,gBACqB,EAGrB,MAAmC,OAA4B,EAC/D,UACA,UACA,iBACA,gBACqB,EAErB,KACA,CACA,8BACA,MAAgC,OAAkB,IAElD,EADA,0BACA,gCACA,UACA,UACA,gBACqB,EAGrB,MAAmC,OAA+B,EAClE,UACA,UACA,gBACqB,EAErB,KACA,CACA,8BACA,8BACA,mCACA,SACA,gBACqB,OAGrB,mEAEA,KAEA,kCACA,iCACA,sCACA,SACA,gBACqB,MAErB,CACA,sBAA4B,GAAoB,MAAQ,uCAA4C,CACpG,WACA,SACA,gBACqB,CACrB,CACA,KAEA,UACA,oBACA,KACA,WACA,UACA,QAAiC,OAAkB,IACnD,gBACqB,OAGrB,2CAAmE,SAAe,EAElF,CACA,CACA,CACA,SACA,GACA,8CACA,OACA,IACA,oDACA,UACA,eACA,CACA,CACA,WACA,QACA,UACA,KACA,cACA,QACA,CAAS,CACJ,CACL","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/wallets/wallet-connect/receiver/session-request.js"],"sourcesContent":["import { handleSendRawTransactionRequest } from \"./request-handlers/send-raw-transaction.js\";\nimport { handleSendTransactionRequest } from \"./request-handlers/send-transaction.js\";\nimport { handleSignTransactionRequest } from \"./request-handlers/sign-transaction.js\";\nimport { handleSignTypedDataRequest } from \"./request-handlers/sign-typed-data.js\";\n// Due to some edge cases, we can't import these handlers dynamically\nimport { handleSignRequest } from \"./request-handlers/sign.js\";\nimport { parseEip155ChainId } from \"./utils.js\";\n/**\n * @internal\n */\nexport async function fulfillRequest(options) {\n    const { wallet, walletConnectClient, thirdwebClient, event: { topic, id, params: { chainId: rawChainId, request }, }, handlers, } = options;\n    const account = wallet.getAccount();\n    if (!account) {\n        throw new Error(\"No account connected to provided wallet\");\n    }\n    let result;\n    try {\n        switch (request.method) {\n            case \"personal_sign\": {\n                if (handlers?.personal_sign) {\n                    result = await handlers.personal_sign({\n                        account,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSignRequest({\n                        account,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_sign\": {\n                if (handlers?.eth_sign) {\n                    result = await handlers.eth_sign({\n                        account,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSignRequest({\n                        account,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_signTypedData\": {\n                if (handlers?.eth_signTypedData) {\n                    result = await handlers.eth_signTypedData({\n                        account,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSignTypedDataRequest({\n                        account,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_signTypedData_v4\": {\n                if (handlers?.eth_signTypedData_v4) {\n                    result = await handlers.eth_signTypedData_v4({\n                        account,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSignTypedDataRequest({\n                        account,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_signTransaction\": {\n                if (handlers?.eth_signTransaction) {\n                    result = await handlers.eth_signTransaction({\n                        account,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSignTransactionRequest({\n                        account,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_sendTransaction\": {\n                const chainId = parseEip155ChainId(rawChainId);\n                if (handlers?.eth_sendTransaction) {\n                    result = await handlers.eth_sendTransaction({\n                        account,\n                        chainId,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSendTransactionRequest({\n                        account,\n                        chainId,\n                        thirdwebClient,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"eth_sendRawTransaction\": {\n                const chainId = parseEip155ChainId(rawChainId);\n                if (handlers?.eth_sendRawTransaction) {\n                    result = await handlers.eth_sendRawTransaction({\n                        account,\n                        chainId,\n                        params: request.params,\n                    });\n                }\n                else {\n                    result = await handleSendRawTransactionRequest({\n                        account,\n                        chainId,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            case \"wallet_addEthereumChain\": {\n                if (handlers?.wallet_addEthereumChain) {\n                    result = await handlers.wallet_addEthereumChain({\n                        wallet,\n                        params: request.params,\n                    });\n                }\n                else {\n                    throw new Error(\"Unsupported request method: wallet_addEthereumChain\");\n                }\n                break;\n            }\n            case \"wallet_switchEthereumChain\": {\n                if (handlers?.wallet_switchEthereumChain) {\n                    result = await handlers.wallet_switchEthereumChain({\n                        wallet,\n                        params: request.params,\n                    });\n                }\n                else {\n                    const { handleSwitchChain } = await import(\"./request-handlers/switch-chain.js\");\n                    result = await handleSwitchChain({\n                        wallet,\n                        params: request.params,\n                    });\n                }\n                break;\n            }\n            default: {\n                const potentialHandler = handlers?.[request.method];\n                if (potentialHandler) {\n                    result = await potentialHandler({\n                        account,\n                        chainId: parseEip155ChainId(rawChainId),\n                        params: request.params,\n                    });\n                }\n                else {\n                    throw new Error(`Unsupported request method: ${request.method}`);\n                }\n            }\n        }\n    }\n    catch (error) {\n        result = {\n            code: typeof error === \"object\" && error !== null && \"code\" in error\n                ? error.code\n                : 500,\n            message: typeof error === \"object\" && error !== null && \"message\" in error\n                ? error.message\n                : \"Unknown error\",\n        };\n    }\n    walletConnectClient.respond({\n        topic,\n        response: {\n            id,\n            jsonrpc: \"2.0\",\n            result,\n        },\n    });\n}\n//# sourceMappingURL=session-request.js.map"],"names":[],"sourceRoot":""}