{"version":3,"file":"88972.js","mappings":"+fAgBO,sBACP,eACA,iCACA,QACA,UAEA,cACkB,QAAW,gBAC7B,sBACA,CACK,EACL,MAAW,QAAW,GACtB","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/rpc/actions/eth_getTransactionCount.js"],"sourcesContent":["import { hexToNumber, numberToHex } from \"../../utils/encoding/hex.js\";\n/**\n * Retrieves the transaction count (nonce) for a given Ethereum address.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving the transaction count.\n * @returns A promise that resolves to the transaction count as a number.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getTransactionCount } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionCount = await eth_getTransactionCount(rpcRequest, {\n *  address: \"0x...\",\n * });\n * ```\n */\nexport async function eth_getTransactionCount(request, params) {\n    const count = await request({\n        method: \"eth_getTransactionCount\",\n        params: [\n            params.address,\n            // makes sense to default to `pending` here, since we're asking for a transaction count (nonce)\n            params.blockNumber\n                ? numberToHex(params.blockNumber)\n                : params.blockTag || \"pending\",\n        ],\n    });\n    return hexToNumber(count);\n}\n//# sourceMappingURL=eth_getTransactionCount.js.map"],"names":[],"sourceRoot":""}