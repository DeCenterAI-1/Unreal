{"version":3,"file":"68928.js","mappings":"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","sources":["webpack://unreal/./src/app/home/creations/components/NoItemFound.tsx","webpack://unreal/./src/app/home/creations/components/PhotoGridTwo.tsx","webpack://unreal/./src/utils/web2.ts","webpack://unreal/./src/utils/web3.ts","webpack://unreal/./src/utils/index.ts","webpack://unreal/./supabase/server.ts","webpack://unreal/./src/app/home/creations/components/Tabs.tsx","webpack://unreal/./src/app/home/creations/components/TabIcon.tsx","webpack://unreal/./src/app/home/components/InfiniteScroll.tsx","webpack://unreal/./src/utils/sentryUtils.ts","webpack://unreal/./src/app/home/components/photoOverlay.tsx","webpack://unreal/./src/app/libs/constants.ts","webpack://unreal/./src/queries/post/getPostsByUser.ts"],"sourcesContent":["import { TabText } from \"@/stores/creationAndProfileStore\";\nimport TabIcon from \"./TabIcon\";\n\ninterface TabProps {\n  title: TabText;\n  content: string;\n  subContent: string;\n}\n\nexport default function NoItemFound({ title, content, subContent }: TabProps) {\n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"flex justify-center items-center w-full h-[60vh]\">\n        <div className=\"flex flex-col justify-center items-center\">\n          <TabIcon text={title} color=\"#5D5D5D\" width=\"200px\" height=\"200px\" />\n\n          <p>{content}</p>\n\n          <p>{subContent}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","\"use client\";\nimport { useCallback, useEffect, useMemo, useState, useRef } from \"react\";\nimport type { ReactElement } from \"react\";\nimport Image from \"next/image\";\nimport { truncateText } from \"@/utils\";\nimport { timeAgo } from \"@/app/libs/timeAgo\";\nimport { OptionMenuIcon } from \"@/app/components/icons\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport NoItemFound from \"./NoItemFound\";\nimport InfiniteScroll from \"../../components/InfiniteScroll\";\nimport dynamic from \"next/dynamic\";\nimport PhotoOverlay, {\n  ExtendedRenderPhotoContext,\n} from \"../../components/photoOverlay\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport { TabText } from \"@/stores/creationAndProfileStore\";\nimport { Post } from \"$/types/data.types\";\nimport { getImage } from \"../../formattedPhotos\";\n\n// Constants for breakpoints and grid sizing\nconst BREAKPOINTS = {\n  FOUR_XL: 2000,\n  TWO_XL: 1536,\n  XL: 1280,\n  LG: 1024,\n  MD: 768,\n  SM: 640,\n} as const;\n\nconst GRID_SIZES = {\n  TWO_XL: 380,\n  LG: 320,\n  MD: 320,\n  SM: 300,\n} as const;\n\n// Props interface for the PhotoGridTwo component\ninterface TabProps {\n  title: TabText;\n  content: string;\n  subContent: string;\n  data?: any;\n  isLoading?: boolean;\n  hasNextPage?: boolean;\n  fetchNextPage?: () => void;\n  isFetchingNextPage?: boolean;\n}\n\ninterface PhotoData {\n  id: number;\n  src: string;\n  width: number;\n  height: number;\n  alt: string;\n  caption?: string;\n  prompt?: string;\n  createdAt: string;\n  ipfsImages?: Array<{\n    hash: string;\n    fileNames: string[];\n  }>;\n  author: string;\n}\n\ninterface TransformedPhoto {\n  id: string;\n  src: string;\n  width: number;\n  height: number;\n  alt: string;\n  caption?: string | null;\n  prompt: string;\n  createdAt: string;\n  author: string;\n}\n\n// Dynamically import ImageView with no SSR since it's only needed on client\nconst ImageView = dynamic(() => import(\"../../components/imageView\"), {\n  ssr: false,\n  loading: () => null,\n});\n\nexport default function PhotoGridTwo({\n  title,\n  content,\n  subContent,\n  data,\n  isLoading = false,\n  hasNextPage = false,\n  fetchNextPage = () => {},\n  isFetchingNextPage = false,\n}: TabProps): ReactElement {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [photos, setPhotos] = useState<TransformedPhoto[]>([]);\n  const [transformedPosts, setTransformedPosts] = useState<TransformedPhoto[]>(\n    [],\n  );\n  const [stableLoading, setStableLoading] = useState(true); // Stable loading state to prevent flashing\n  const [imageIndex, setImageIndex] = useState(-1);\n  const [size, setSize] = useState<number>(GRID_SIZES.LG);\n\n  // Transform and stabilize data updates to prevent flashing\n  useEffect(() => {\n    // During transitions, we keep the previous data and just overlay loading indicators\n    // Only reset data when we have a real loading state (not a transition)\n    if (isLoading && !photos.length) {\n      setStableLoading(true);\n    }\n\n    // If we have data, process it\n    if (data?.pages) {\n      const allPosts = data.pages.flatMap((page: any) => page.data || []);\n\n      // Transform the posts into photo format\n      const newTransformedPosts = allPosts\n        .filter((post: Post) => {\n          const image = post.ipfsImages?.[0];\n          return image?.hash && image?.fileNames?.[0];\n        })\n        .map((post: Post): TransformedPhoto => {\n          const image = post.ipfsImages?.[0];\n          // We already filtered out null cases above\n          // const imageUrl = `${\n          //   process.env.NEXT_PUBLIC_LIGHTHOUSE_GATE_WAY || \"\"\n          // }${image!.hash}/${image!.fileNames[0]}`;\n\n          const imageUrl = getImage(\n            image!.hash,\n            image!.fileNames?.[0],\n            post.author,\n          );\n          return {\n            id: post.id.toString(),\n            src: imageUrl,\n            width: size,\n            height: size,\n            alt: post.caption || post.prompt || \"\",\n            caption: post.caption,\n            prompt: post.prompt || \"\",\n            createdAt: post.createdAt,\n            author: post.author,\n          };\n        });\n\n      setTransformedPosts(newTransformedPosts);\n\n      // Turn off loading only when we have posts or we're sure we're done loading\n      if (newTransformedPosts.length > 0 || !isLoading) {\n        setStableLoading(false);\n        setPhotos(newTransformedPosts);\n      }\n    } else if (!isLoading && data) {\n      // Only turn off loading and show empty state when we're completely done loading\n      // AND we have a data object (even if it has no items)\n      setStableLoading(false);\n      setPhotos([]);\n    }\n  }, [data, isLoading, size]);\n\n  const handleImageIndex = useCallback(\n    (context: ExtendedRenderPhotoContext) => {\n      setImageIndex(context.index);\n    },\n    [],\n  );\n\n  const loadMore = useCallback(() => {\n    if (hasNextPage) {\n      fetchNextPage();\n    }\n  }, [hasNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    let timeoutId: NodeJS.Timeout;\n    const handleResize = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        const width = Number(window.innerWidth);\n        if (width >= BREAKPOINTS.FOUR_XL) {\n          setSize(width * 0.22);\n        } else if (width >= BREAKPOINTS.TWO_XL) {\n          setSize(width * 0.21);\n        } else if (width >= BREAKPOINTS.XL) {\n          setSize(width * 0.276);\n        } else if (width >= BREAKPOINTS.LG) {\n          setSize(width * 0.266);\n        } else if (width >= BREAKPOINTS.MD) {\n          setSize(width * 0.41);\n        } else if (width >= BREAKPOINTS.SM) {\n          setSize(width * 0.49);\n        } else {\n          setSize(width * 0.98);\n        }\n      }, 100);\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  // Only show empty state when we're not loading and have no photos\n  // We've already confirmed we have data object but it's empty\n  if (!photos.length && !isLoading && !stableLoading && data) {\n    return (\n      <NoItemFound title={title} content={content} subContent={subContent} />\n    );\n  }\n\n  // Now let InfiniteScroll handle the loading states\n  return (\n    <>\n      <InfiniteScroll\n        isLoadingInitial={isLoading || stableLoading}\n        isLoadingMore={isFetchingNextPage}\n        loadMore={loadMore}\n        hasNextPage={hasNextPage}\n      >\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-2 place-items-center\">\n          {photos.map((photo: TransformedPhoto, index: number) => {\n            const context = {\n              index,\n              photo,\n              width: photo.width,\n              height: photo.height,\n            };\n\n            return (\n              <div\n                key={photo.id}\n                style={{ width: size, height: size }}\n                className=\"relative grid-cols-1\"\n              >\n                <PhotoOverlay\n                  setImageIndex={() =>\n                    handleImageIndex(context as ExtendedRenderPhotoContext)\n                  }\n                  context={context as ExtendedRenderPhotoContext}\n                  photo={\n                    <Image\n                      src={photo.src}\n                      fill={true}\n                      alt={String(photo.alt)}\n                      priority={index < 8}\n                      className=\"object-cover\"\n                      loading={index < 8 ? \"eager\" : \"lazy\"}\n                      sizes=\"(min-width: 1536px) 380px, (min-width: 1024px) 320px, (min-width: 768px) 320px, 300px\"\n                    />\n                  }\n                  section=\"photoGridTwo\"\n                >\n                  <>\n                    <div className=\"absolute top-0 flex justify-between text-primary-1 text-sm picture-gradient w-full h-12 items-center px-3\">\n                      <p>{timeAgo(context.photo.createdAt)}</p>\n                      <button>\n                        <OptionMenuIcon color=\"#FFFFFF\" />\n                      </button>\n                    </div>\n\n                    <Image\n                      src={photo.src}\n                      fill={true}\n                      alt={String(photo.alt)}\n                      priority={index < 8}\n                      className=\"object-cover\"\n                      loading={index < 8 ? \"eager\" : \"lazy\"}\n                      sizes=\"(min-width: 1536px) 380px, (min-width: 1024px) 320px, (min-width: 768px) 320px, 300px\"\n                    />\n\n                    <p className=\"absolute bottom-0 left-0 w-full text-left text-primary-1 text-sm picture-gradient h-14 p-3\">\n                      {truncateText(\n                        context.photo.caption || context.photo.prompt,\n                      )}\n                    </p>\n                  </>\n                </PhotoOverlay>\n              </div>\n            );\n          })}\n        </div>\n      </InfiniteScroll>\n\n      {imageIndex > -1 && (\n        <ImageView photo={photos[imageIndex]} setImageIndex={setImageIndex} />\n      )}\n    </>\n  );\n}\n","import { ethers } from \"ethers\";\n\n// Function to generate Ethereum wallet\nexport const generateEthereumWallet = (): WalletObject => {\n  // Generate Ethereum Wallet using ethers.js\n  const wallet = ethers.Wallet.createRandom();\n\n  return {\n    address: wallet.address,\n    privateKey: wallet.privateKey,\n    publicKey: wallet.publicKey,\n  };\n};\n\n// returns a range of numbers to be used for pagination.\nexport function getRange(page: number, limit: number) {\n  const from = page * limit;\n  const to = from + limit - 1;\n\n  return [from, to];\n}\n\nexport function isValidFileName(name: string): boolean {\n  // Basic validation: empty strings are not allowed\n  if (!name) return false;\n\n  // Check if it's just a dot (hidden files/folders)\n  if (name === \".\") return false;\n\n  // Check if it starts with a dot (hidden files/folders)\n  if (name.startsWith(\".\")) {\n    // Hidden files/folders are allowed, but we should check if they're valid after the dot\n    const rest = name.slice(1);\n    return rest.length > 0 && isValidFileName(rest);\n  }\n\n  // // Check if it contains invalid characters\n  // const invalidChars = /[\\/*?:<>|\\\\]/;\n  // if (invalidChars.test(name)) return false;\n\n  // Check if it exceeds maximum length\n  const maxNameLength = 255; // Windows limit\n  if (name.length > maxNameLength) return false;\n\n  // If we pass all checks, it's a valid file/folder name\n  return true;\n}\n\nexport function isHighQualityImage(filename: string): boolean {\n  if (!isValidFileName(filename)) {\n    return false;\n  }\n  // const lowQExt = [\"webp\", \"svg\", \"ico\"];\n  const highQExt = [\"jpeg\", \"jpg\", \"png\"];\n\n  return highQExt.includes(filename.toLowerCase().split(\".\").pop() || \"\");\n}\n\nexport function truncateText(\n  text: string | undefined | null,\n  wordLimit: number = 10,\n): string {\n  if (!text) return \"\";\n  const words = text.split(\" \");\n  return words.length > wordLimit\n    ? words.slice(0, wordLimit).join(\" \") + \"...\"\n    : text;\n}\n\nexport const getNotificationMessage = (\n  type: string,\n  senderName: string | null | undefined,\n) => {\n  switch (type) {\n    case \"like\":\n      return `${senderName} liked your post!`;\n    case \"comment\":\n      return `${senderName} commented on your post!`;\n    case \"share\":\n      return `${senderName} just shared your post! Your content is reaching more people.`;\n    case \"follow\":\n      return `${senderName} followed you!`;\n    default:\n      return \"You have a new notification!\";\n  }\n};\n\nexport function formatDate(dateString: string) {\n  const date = new Date(dateString);\n\n  return date.toLocaleDateString(\"en-GB\", {\n    day: \"numeric\",\n    month: \"short\",\n    year: \"numeric\",\n  });\n}\n\nexport function getImageResolution(imageUrl: string) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = imageUrl;\n    img.onload = () => {\n      resolve(`${img.width} × ${img.height} `);\n    };\n    img.onerror = (err) => reject(err);\n  });\n}\n\n// export function downloadImage(imageUrl: string, fileName?: string) {\n//   const uniqueId = Date.now(); // Unique timestamp\n//   const defaultFileName = `downloaded-image-${uniqueId}.jpg`; //  unique filename\n\n//   fetch(imageUrl)\n//     .then((response) => response.blob())\n//     .then((blob) => {\n//       const url = window.URL.createObjectURL(blob);\n//       const a = document.createElement(\"a\");\n//       a.href = url;\n//       a.download = fileName || defaultFileName;\n//       document.body.appendChild(a);\n//       a.click();\n//       document.body.removeChild(a);\n//       window.URL.revokeObjectURL(url);\n//     })\n//     .catch((error) => console.error(\"Error downloading image:\", error));\n// }\n\nexport function downloadImage(imageUrl: string, fileName?: string) {\n  fetch(imageUrl)\n    .then((response) => response.blob())\n    .then((blob) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const a = document.createElement(\"a\");\n        a.href = reader.result as string;\n        a.download = fileName || `downloaded-image-${Date.now()}.jpg`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      };\n      reader.readAsDataURL(blob);\n    })\n    .catch((error) => console.error(\"Error downloading image:\", error));\n}\n\nexport const formatMoney = (value: number) => {\n  return new Intl.NumberFormat(\"en-US\").format(value);\n};\n\nexport function formatNumber(num: number): string {\n  if (num >= 1_000_000_000) return (num / 1_000_000_000).toFixed(1).replace(/\\.0$/, '') + 'B';\n  if (num >= 1_000_000) return (num / 1_000_000).toFixed(1).replace(/\\.0$/, '') + 'M';\n  if (num >= 1_000) return (num / 1_000).toFixed(1).replace(/\\.0$/, '') + 'k';\n  return num.toString();\n}\n\nexport function splitName(fullName: string) {\n  let parts = fullName.trim().split(\" \");\n  let firstName = parts[0];\n  let lastName = parts.slice(1).join(\" \"); // Handles cases with middle names\n  return { firstName, lastName };\n}\n","import { Chain, createThirdwebClient, getContract } from \"thirdweb\";\n\nexport const client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_TW_CLIENT_ID as string,\n});\n\nexport const getContractInstance = (chain: Chain, address: string) => {\n  return getContract({\n    client,\n    chain,\n    address,\n  });\n};\n","export * from \"./web2\";\nexport * from \"./web3\";\nexport * from \"./sentryUtils\";\n","import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { SupabaseClient } from \"@supabase/supabase-js\";\nimport type { Database } from \"$/types/database.types\";\n\nexport async function createClient(): Promise<SupabaseClient<Database>> {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options),\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n      },\n    },\n  );\n}\n","\"use client\";\n\nimport { useCallback, useEffect, useMemo, useTransition } from \"react\";\nimport TabIcon from \"./TabIcon\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport {\n  useCreationAndProfileStore,\n  TabText,\n} from \"@/stores/creationAndProfileStore\";\nimport { motion } from \"framer-motion\";\n\nexport interface ITabs {\n  hideDraft?: boolean;\n  currentIndex: number;\n  setCurrentIndex: (value: number) => void;\n  section: \"creation\" | \"profile\"; // Added section prop to identify the context\n}\n\n// Memoize tab configuration\nconst TAB_CONFIG = [\n  { text: \"Public\", index: 0 },\n  { text: \"Private\", index: 1 },\n  { text: \"Liked\", index: 2 },\n  { text: \"Pinned\", index: 3 },\n  { text: \"Draft\", index: 4 },\n] as const;\n\nexport default function Tabs({\n  hideDraft,\n  currentIndex,\n  setCurrentIndex,\n  section,\n}: ITabs) {\n  // Access the store and URL parameters\n  const { creationTab, profileTab, initFromUrl } = useCreationAndProfileStore();\n  const searchParams = useSearchParams();\n\n  // Memoize the filtered tabs\n  const tabs = useMemo(\n    () => TAB_CONFIG.filter((tab) => !(hideDraft && tab.text === \"Draft\")),\n    [hideDraft]\n  );\n\n  // Sync with URL on initial load\n  useEffect(() => {\n    const urlParam = searchParams.get(\"s\");\n    if (urlParam) {\n      initFromUrl(section, urlParam);\n\n      // Also update the currentIndex to match the URL\n      const tabIndex = tabs.findIndex(\n        (tab) => tab.text.toLowerCase() === urlParam.toLowerCase()\n      );\n      if (tabIndex >= 0) {\n        setCurrentIndex(tabIndex);\n      }\n    }\n  }, [searchParams, initFromUrl, section, tabs, setCurrentIndex]);\n\n  return (\n    <motion.div\n      className=\"flex gap-x-8 border-b-[1px] border-primary-11 overflow-x-auto\"\n      initial={{ opacity: 0.95 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.2 }}\n    >\n      {tabs.map(({ text, index }) => (\n        <TabBtn\n          key={text}\n          currentIndex={currentIndex}\n          index={index}\n          text={text}\n          setCurrentIndex={setCurrentIndex}\n          section={section}\n        />\n      ))}\n    </motion.div>\n  );\n}\n\nexport interface ITabBtn {\n  currentIndex: number;\n  index: number;\n  text: TabText;\n  setCurrentIndex: (value: number) => void;\n  section: \"creation\" | \"profile\"; // Added section prop\n}\n\nexport function TabBtn({\n  index,\n  currentIndex,\n  text,\n  setCurrentIndex,\n  section,\n}: ITabBtn) {\n  const pathname = usePathname();\n  const router = useRouter(); // router\n  const searchParams = useSearchParams(); // Get searchParams here\n  // Add isPending state to show loading state and improve perceived performance\n  const [isPending, startTransition] = useTransition();\n\n  // Get the correct setter based on the section\n  const { setCreationTab, setProfileTab } = useCreationAndProfileStore();\n\n  // Determine the active state\n  const isActive = currentIndex === index;\n\n  // Memoize color calculation\n  const color = useMemo(() => (isActive ? \"#DADADA\" : \"#5D5D5D\"), [isActive]);\n\n  // Create URL object for smoother navigation\n  const createTabUrl = useCallback(\n    (tabName: string) => {\n      const params = new URLSearchParams(searchParams.toString());\n      params.set(\"s\", tabName.toLowerCase());\n      return `${pathname}?${params.toString()}`;\n    },\n    [pathname, searchParams]\n  );\n\n  const handleClick = useCallback(() => {\n    if (isActive) return; // Skip if already active\n\n    // Update the local component state\n    setCurrentIndex(index);\n\n    // Update the store based on the section\n    if (section === \"creation\") {\n      setCreationTab(text);\n    } else if (section === \"profile\") {\n      setProfileTab(text);\n    }\n\n    // Update URL without page reload - use startTransition for smoother UI\n    startTransition(() => {\n      router.replace(createTabUrl(text), { scroll: false });\n    });\n  }, [\n    index,\n    setCurrentIndex,\n    text,\n    section,\n    setCreationTab,\n    setProfileTab,\n    pathname,\n    router,\n    isActive,\n    createTabUrl,\n  ]);\n\n  return (\n    <motion.button\n      className={`flex justify-center items-center gap-x-2 py-2 px-4 border-primary-1 ${\n        currentIndex === index ? \"border-b-2\" : \"\"\n      }`}\n      onClick={handleClick}\n      whileTap={{ scale: 0.98 }}\n      transition={{ duration: 0.1 }}\n      disabled={isPending}\n    >\n      <p style={{ color }}>{text}</p>\n      <div>\n        <TabIcon text={text} width=\"24px\" height=\"24px\" color={color} />\n      </div>\n    </motion.button>\n  );\n}\n","import {\n  CrossedEyeIcon,\n  DraftIcon,\n  GlobeIcon,\n  HeartIcon,\n  PhotoGridIcon,\n  PinIcon,\n  UserIcon,\n} from \"@/app/components/icons\";\nimport { TabText } from \"@/stores/creationAndProfileStore\";\n\ninterface TabIconProps {\n  text: TabText;\n  color: `#${string}`;\n  height: string;\n  width: string;\n}\n\nexport default function TabIcon({ text, color, height, width }: TabIconProps) {\n  switch (text) {\n    case \"Public\":\n      return <GlobeIcon height={height} width={width} color={color} />;\n    case \"Private\":\n      return <CrossedEyeIcon height={height} width={width} color={color} />;\n    case \"Liked\":\n      return <HeartIcon height={height} width={width} color={color} />;\n    case \"Pinned\":\n      return <PinIcon height={height} width={width} color={color} />;\n    case \"Draft\":\n      return <DraftIcon height={height} width={width} color={color} />;\n    case \"User\":\n      return <UserIcon height={height} width={width} color={color} />;\n    case \"Image\":\n      return <PhotoGridIcon height={height} width={width} color={color} />;\n    default:\n    // throw Error(\"Invalid Table\")\n  }\n}\n","\"use client\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\ntype Props = {\n  isLoadingInitial: boolean;\n  isLoadingMore: boolean;\n  children: React.ReactNode;\n  loadMore: () => void;\n  hasNextPage: boolean;\n};\n\nfunction InfiniteScroll(props: Props) {\n  const observerElement = useRef<HTMLDivElement | null>(null);\n  const { isLoadingInitial, isLoadingMore, children, loadMore, hasNextPage } =\n    props;\n\n  useEffect(() => {\n    // is element in view?\n    function handleIntersection(entries: IntersectionObserverEntry[]) {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting && !isLoadingMore && !isLoadingInitial) {\n          // console.log(\"in view\");\n          loadMore();\n        }\n      });\n    }\n\n    // create observer instance\n    const observer = new IntersectionObserver(handleIntersection, {\n      root: null,\n      rootMargin: \"100px\",\n      threshold: 0,\n    });\n\n    if (observerElement.current) {\n      observer.observe(observerElement.current);\n    }\n\n    // cleanup function\n    return () => observer.disconnect();\n  }, [isLoadingMore, isLoadingInitial, loadMore]);\n\n  // console.log(isLoadingInitial);\n  return (\n    <div className=\"mb-32 w-full\">\n      {isLoadingInitial && (\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2  w-full \">\n          {Array(12)\n            .fill(null)\n            .map((_, index) => (\n              <Skeleton\n                key={index}\n                height={200}\n                baseColor=\"#1a1a1a\" // Dark background\n                highlightColor=\"#333\" // Slightly lighter shimmer effect\n              />\n            ))}\n        </div>\n      )}\n\n      {!isLoadingInitial && <>{children}</>}\n\n      <div ref={observerElement} id=\"obs\">\n        {isLoadingMore && hasNextPage && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2  w-full p-2 \">\n            {Array(4)\n              .fill(null)\n              .map((_, index) => (\n                <Skeleton\n                  key={index}\n                  height={200}\n                  baseColor=\"#1a1a1a\" // Dark background\n                  highlightColor=\"#333\" // Slightly lighter shimmer effect\n                />\n              ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default InfiniteScroll;\n","import * as Sentry from \"@sentry/nextjs\";\n\n// Track throttled messages to avoid duplicates\ninterface ThrottleCache {\n  [key: string]: {\n    timestamp: number;\n    count: number;\n  };\n}\n\n// Cache for throttling\nconst messageCache: ThrottleCache = {};\nconst MIN_THROTTLE_MS = 5000; // 5 seconds between identical messages\nconst MAX_CACHE_SIZE = 100;\nconst MAX_OBJECT_SIZE = 5000; // Characters limit for stringified objects\n\n/**\n * Safely stringify data, with size limits to prevent performance issues\n */\nconst safeStringify = (data: any): string => {\n  if (data === undefined || data === null) return \"\";\n  if (typeof data === \"string\") return data.substring(0, MAX_OBJECT_SIZE);\n\n  try {\n    const str = JSON.stringify(data);\n    return str.length > MAX_OBJECT_SIZE\n      ? str.substring(0, MAX_OBJECT_SIZE) + \"...[truncated]\"\n      : str;\n  } catch (e) {\n    return \"[Object cannot be serialized]\";\n  }\n};\n\n/**\n * Clean the throttle cache periodically\n */\nconst cleanThrottleCache = (): void => {\n  const now = Date.now();\n  const keys = Object.keys(messageCache);\n\n  if (keys.length > MAX_CACHE_SIZE) {\n    // Remove oldest entries if cache is too large\n    const oldestKeys = keys\n      .map((key) => {\n        // Add safety check for undefined entries\n        if (\n          !messageCache[key] ||\n          typeof messageCache[key].timestamp !== \"number\"\n        ) {\n          return { key, time: 0 };\n        }\n        return { key, time: messageCache[key].timestamp };\n      })\n      .sort((a, b) => a.time - b.time)\n      .slice(0, keys.length - MAX_CACHE_SIZE / 2)\n      .map((item) => item.key);\n\n    oldestKeys.forEach((key) => delete messageCache[key]);\n  }\n\n  // Remove expired entries\n  keys.forEach((key) => {\n    // Add safety check for undefined entries\n    if (\n      messageCache[key] &&\n      typeof messageCache[key].timestamp === \"number\" &&\n      now - messageCache[key].timestamp > MIN_THROTTLE_MS * 10\n    ) {\n      delete messageCache[key];\n    } else if (\n      !messageCache[key] ||\n      typeof messageCache[key].timestamp !== \"number\"\n    ) {\n      // Remove invalid entries that could cause errors\n      delete messageCache[key];\n    }\n  });\n};\n\n// Clean cache every minute\nif (typeof window !== \"undefined\") {\n  setInterval(cleanThrottleCache, 60000);\n}\n\n/**\n * Check if a message is throttled\n * Returns true if the message should be skipped\n */\nconst isThrottled = (cacheKey: string): boolean => {\n  const now = Date.now();\n\n  if (messageCache[cacheKey]) {\n    const { timestamp, count } = messageCache[cacheKey];\n    const elapsed = now - timestamp;\n\n    if (elapsed < MIN_THROTTLE_MS) {\n      // Update count but don't send\n      messageCache[cacheKey].count++;\n      return true;\n    }\n\n    // Update timestamp and count\n    messageCache[cacheKey].timestamp = now;\n    messageCache[cacheKey].count++;\n  } else {\n    // First occurrence\n    messageCache[cacheKey] = { timestamp: now, count: 1 };\n\n    // Clean cache if it gets too large\n    if (Object.keys(messageCache).length > MAX_CACHE_SIZE) {\n      cleanThrottleCache();\n    }\n  }\n\n  return false;\n};\n\n/**\n * Log an error to Sentry with additional context\n */\nexport const captureException = (\n  error: Error | unknown,\n  context?: Record<string, any>\n): void => {\n  // Skip in development for better performance, just log to console\n  if (process.env.NODE_ENV === \"development\") {\n    console.error(error, context);\n    return;\n  }\n\n  // Create a throttle key based on error message\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  const throttleKey = `error:${errorMessage.substring(0, 100)}`;\n\n  if (isThrottled(throttleKey)) return;\n\n  // Limit context size to prevent performance issues\n  const safeContext = context\n    ? Object.fromEntries(\n        Object.entries(context).map(([key, value]) => [\n          key,\n          safeStringify(value),\n        ])\n      )\n    : undefined;\n\n  if (error instanceof Error) {\n    Sentry.captureException(error, {\n      extra: safeContext,\n    });\n  } else {\n    Sentry.captureException(new Error(String(error)), {\n      extra: safeContext,\n    });\n  }\n};\n\n/**\n * Log a message to Sentry at the specified level\n */\nexport const captureMessage = (\n  message: string,\n  level: Sentry.SeverityLevel = \"info\",\n  context?: Record<string, any>\n): void => {\n  // Skip low-priority messages in production\n  if (process.env.NODE_ENV === \"production\" && level === \"info\") {\n    return;\n  }\n\n  // Limit message size\n  const safeMessage = message.substring(0, 200);\n\n  // Create throttle key based on message\n  const throttleKey = `${level}:${safeMessage}`;\n\n  if (isThrottled(throttleKey)) return;\n\n  // Limit context size\n  const safeContext = context\n    ? Object.fromEntries(\n        Object.entries(context).map(([key, value]) => [\n          key,\n          safeStringify(value),\n        ])\n      )\n    : undefined;\n\n  Sentry.captureMessage(safeMessage, {\n    level,\n    extra: safeContext,\n  });\n};\n\n/**\n * Set the current user for Sentry tracking\n */\nexport const setUser = (\n  id: string | null,\n  email?: string,\n  username?: string,\n  additionalData?: Record<string, any>\n): void => {\n  if (id) {\n    Sentry.setUser({\n      id,\n      email,\n      username,\n      ...additionalData,\n    });\n  } else {\n    // Clear user data when id is null\n    Sentry.setUser(null);\n  }\n};\n\n/**\n * Add breadcrumb to track user or system actions\n */\nexport const addBreadcrumb = (\n  message: string,\n  category?: string,\n  level: Sentry.SeverityLevel = \"info\",\n  data?: Record<string, any>\n): void => {\n  // Skip breadcrumbs in production for better performance\n  if (process.env.NODE_ENV === \"production\" && level === \"info\") {\n    return;\n  }\n\n  // Limit data size\n  const safeData = data\n    ? Object.fromEntries(\n        Object.entries(data).map(([key, value]) => [key, safeStringify(value)])\n      )\n    : undefined;\n\n  Sentry.addBreadcrumb({\n    message: message.substring(0, 100),\n    category,\n    level,\n    data: safeData,\n  });\n};\n\n/**\n * Set context information for current scope\n */\nexport const setContext = (\n  name: string,\n  context: Record<string, any>\n): void => {\n  // Limit context size\n  const safeContext = Object.fromEntries(\n    Object.entries(context).map(([key, value]) => [key, safeStringify(value)])\n  );\n\n  Sentry.setContext(name, safeContext);\n};\n\n/**\n * Replace console.log in production\n * In development, it will only log to console\n * In production, it will send to Sentry as warning-level message only if important\n */\nexport const log = (message: string, data?: any): void => {\n  const isDev = process.env.NODE_ENV === \"development\";\n\n  if (isDev) {\n    console.log(message, data);\n    return;\n  }\n\n  // In production, only log critical info\n  // Most info logs can be skipped entirely\n  if (\n    message.includes(\"error\") ||\n    message.includes(\"fail\") ||\n    message.includes(\"critical\")\n  ) {\n    captureMessage(`${message}`, \"warning\");\n  }\n};\n\n/**\n * Replace console.error in production\n * Always captures as error in Sentry, only logs to console in development\n */\nexport const logError = (message: string, error?: Error | unknown): void => {\n  const isDev = process.env.NODE_ENV === \"development\";\n\n  if (isDev) {\n    console.error(message, error);\n    return;\n  }\n\n  // Create throttle key for this error\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  const throttleKey = `error:${message}:${errorMessage.substring(0, 50)}`;\n\n  if (isThrottled(throttleKey)) return;\n\n  if (error) {\n    captureException(error, { message });\n  } else {\n    captureMessage(message, \"error\");\n  }\n};\n\n/**\n * Replace console.warn in production\n * Captures as warning in Sentry, only logs to console in development\n */\nexport const logWarning = (message: string, data?: any): void => {\n  const isDev = process.env.NODE_ENV === \"development\";\n\n  if (isDev) {\n    console.warn(message, data);\n    return;\n  }\n\n  // Create throttle key for this warning\n  const throttleKey = `warning:${message}`;\n\n  if (isThrottled(throttleKey)) return;\n\n  captureMessage(message, \"warning\");\n};\n\n/**\n * Start performance monitoring span\n * Returns a function to call when the operation is complete\n */\nexport const startSpan = (\n  name: string,\n  op: string,\n  data?: Record<string, any>\n): (() => void) => {\n  // Skip in production environments where we've disabled performance monitoring for speed\n  if (process.env.NODE_ENV === \"production\") {\n    // Return empty function as noop\n    return () => {};\n  }\n\n  try {\n    // Create unique ID for this operation\n    const spanId = `${op}-${name}-${Date.now()}`;\n    const startTime = performance.now();\n\n    // Add breadcrumb for operation start\n    const safeData = data\n      ? Object.fromEntries(\n          Object.entries(data).map(([key, value]) => [\n            key,\n            safeStringify(value),\n          ])\n        )\n      : undefined;\n\n    // Safely add breadcrumb with error handling\n    try {\n      addBreadcrumb(`Started ${op}: ${name}`, \"performance\", \"info\", {\n        ...safeData,\n        spanId,\n      });\n    } catch (e) {\n      // Silently fail breadcrumb to not affect performance\n      console.warn(\"Failed to add breadcrumb:\", e);\n    }\n\n    // Return a function to finish the span\n    return () => {\n      try {\n        const endTime = performance.now();\n        const duration = Math.round(endTime - startTime);\n\n        // Only track operations that took significant time (> 50ms)\n        if (duration > 50) {\n          try {\n            addBreadcrumb(\n              `Finished ${op}: ${name} (${duration}ms)`,\n              \"performance\",\n              duration > 500 ? \"warning\" : \"info\", // Mark slow operations as warnings\n              {\n                ...safeData,\n                duration,\n                spanId,\n              }\n            );\n\n            // For very slow operations (>1s), send a performance issue\n            if (duration > 1000) {\n              captureMessage(\n                `Slow operation: ${op} - ${name} took ${duration}ms`,\n                \"warning\",\n                {\n                  performance: true,\n                  duration,\n                  operation: op,\n                  ...safeData,\n                }\n              );\n            }\n          } catch (e) {\n            // Silently fail to not affect performance\n            console.warn(\"Failed to record performance data:\", e);\n          }\n        }\n      } catch (e) {\n        // Silently fail to not affect performance\n        console.warn(\"Failed to finish performance span:\", e);\n      }\n    };\n  } catch (e) {\n    // Return a no-op function if anything fails\n    console.warn(\"Failed to start performance tracking:\", e);\n    return () => {};\n  }\n};\n\n/**\n * Set extra data on the current scope\n */\nexport const setExtra = (key: string, value: any): void => {\n  Sentry.setExtra(key, safeStringify(value));\n};\n","\"use client\";\nimport { ReactNode, useState } from \"react\";\nimport {\n  ChatIcon,\n  HeartFillIcon,\n  HeartIcon,\n  OptionMenuIcon,\n} from \"@/app/components/icons\";\nimport { Photo, RenderPhotoContext } from \"react-photo-album\";\nimport { formatNumber, truncateText } from \"@/utils\";\nimport { usePostLikes } from \"@/hooks/usePostLikes\";\nimport { supabase } from \"$/supabase/client\";\nimport { useLikePost } from \"@/hooks/useLikePost\";\nimport { useUser } from \"@/hooks/useUser\";\nimport { timeAgo } from \"@/app/libs/timeAgo\";\nimport { useComments, useRealtimeComments } from \"@/hooks/useComments\";\nimport ImageOptionMenu from \"./imageOptionMenu\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\n\nexport interface ExtendedRenderPhotoContext extends RenderPhotoContext {\n  photo: Photo & {\n    prompt: string;\n    id: string;\n    author: string;\n    createdAt: string;\n    caption?: string;\n  };\n}\n\ninterface PhotoOverlayProps {\n  hideContent?: true;\n  children: ReactNode;\n  setImageIndex: () => void;\n  context: ExtendedRenderPhotoContext;\n  photo?: ReactNode;\n  section?: string;\n}\n\nexport default function PhotoOverlay({\n  hideContent,\n  children,\n  setImageIndex,\n  context,\n  photo,\n  section,\n}: PhotoOverlayProps) {\n  const router = useRouter();\n  // console.log(context.photo.createdAt);\n  const [hover, setHover] = useState(false);\n  // const [like, setLike] = useState(false);\n  const { userId } = useUser();\n  const {\n    likes,\n    likesCount,\n    isLoading: loadingLikes,\n    hasUserLiked,\n  } = usePostLikes(Number(context.photo.id), supabase);\n  const { mutate: toggleLike } = useLikePost(\n    Number(context.photo.id),\n    userId,\n    context.photo.author,\n  );\n\n  const userHasLiked = likes?.some((like) => like.author === userId);\n\n  // console.log(context.photo.createdAt);\n  const handleCommentClick = () => {\n    setImageIndex(); // or any specific value you want to pass\n  };\n\n  const { data: comments, isLoading: loadingComments } = useComments(\n    context.photo.id,\n  );\n  useRealtimeComments(context.photo.id);\n\n  const handleView = () => {\n    router.push(\"/home/photo/\" + context.photo.id);\n  };\n\n  return (\n    <>\n      <div\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        className=\"absolute top-0 left-0 w-full h-full flex flex-col text-primary-1 text-sm md:hover:bg-gray-900/50\"\n      >\n        {hover && (\n          <div className=\"relative hidden md:flex flex-col text-primary-1 justify-between px-4 py-3 h-full\">\n            {/* <Link href={`/home/photo/${context.photo.id}`}> */}\n            <div\n              onClick={handleView}\n              className=\"absolute top-0 left-0 w-full h-full\"\n            >\n              {\" \"}\n              {photo}{\" \"}\n            </div>\n            {/* </Link> */}\n\n            <div\n              onClick={handleView}\n              className=\"absolute top-0 left-0 w-full h-full cursor-pointer\"\n            ></div>\n            {!hideContent ? (\n              <div className=\"flex justify-between text-primary-1 text-sm z-20\">\n                <p>{timeAgo(context.photo.createdAt)}</p>\n                <ImageOptionMenu\n                  image={context.photo}\n                  postId={context.photo.id}\n                >\n                  <OptionMenuIcon color=\"#FFFFFF\" />\n                </ImageOptionMenu>\n              </div>\n            ) : (\n              <div> </div>\n            )}\n\n            {/* {!loadingLikes && !loadingComments && ( */}\n            <div className=\"flex justify-center gap-4 z-10\">\n              <button\n                className=\"flex gap-1 items-center\"\n                onClick={() => toggleLike()}\n              >\n                {userHasLiked ? (\n                  <HeartFillIcon color=\"#FFFFFF\" />\n                ) : (\n                  <HeartIcon color=\"#FFFFFF\" />\n                )}\n                <p>{likes ? formatNumber(likes?.length) : \"\"}</p>\n              </button>\n\n              <button\n                className=\"flex gap-1 items-center\"\n                onClick={() => handleCommentClick()}\n              >\n                <ChatIcon color=\"#FFFFFF\" />{\" \"}\n                <p>{comments ? formatNumber(comments?.length) : \"\"}</p>\n              </button>\n            </div>\n            {/* )} */}\n\n            {!hideContent ? (\n              <Link href={`/home/photo/${context.photo.id}`}>\n                {\" \"}\n                {/*Link is added to enable prefetch */}\n                <p className=\"text-left text-primary-1 text-sm z-10\">\n                  {truncateText(context.photo.caption || context.photo.prompt)}\n                </p>\n              </Link>\n            ) : (\n              <p></p>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex flex-col md:hidden h-full w-full justify-between items-end p-3\">\n          <div className=\"relative block mr-4\">\n            <div className=\"absolute\">\n              <div className=\"absolute z-20\">\n                <ImageOptionMenu\n                  image={context.photo}\n                  postId={context.photo.id}\n                >\n                  <OptionMenuIcon color=\"#FFFFFF\" />\n                </ImageOptionMenu>\n              </div>\n            </div>\n          </div>\n\n          <div\n            className={`flex flex-col ${section == \"photoGridTwo\" ? \" mb-12\" : \"mb-6\"}`}\n          >\n            <div className=\"relative flex flex-col items-center\">\n              <button\n                className=\"absolute flex flex-col items-center z-10\"\n                onClick={() => toggleLike()}\n              >\n                {userHasLiked ? (\n                  <HeartFillIcon color=\"#FFFFFF\" />\n                ) : (\n                  <HeartIcon color=\"#FFFFFF\" />\n                )}\n              </button>\n\n              <p className=\"mt-6 z-10\">\n                {likes ? formatNumber(likes?.length) : \"\"}\n              </p>\n            </div>\n\n            <div className=\"relative flex flex-col items-center\">\n              <button\n                className=\"absolute flex gap-1 items-center z-10\"\n                onClick={handleCommentClick}\n              >\n                <ChatIcon color=\"#FFFFFF\" />\n              </button>\n\n              <p className=\"mt-6 z-10\">\n                {comments ? formatNumber(comments?.length) : \"\"}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div\n          onClick={handleView}\n          className=\"absolute hidden md:block w-full h-full\"\n        >\n          {!hover && children}{\" \"}\n        </div>\n\n        <div onClick={handleView} className=\"absolute  md:hidden w-full h-full\">\n          {children}{\" \"}\n        </div>\n      </div>\n    </>\n  );\n}\n","export const MD_BREAKPOINT = 768;\nexport const POST_GROUPS = [\"PUBLIC\", \"PRIVATE\", \"LIKED\", \"PINNED\", \"DRAFT\"];\nexport const TOKEN_ADDRESS = \"\";\nexport const LIST_LIMIT = 20;\n","import { Client } from \"$/supabase/client\";\nimport { Post, UploadResponse } from \"$/types/data.types\";\nimport { getRange } from \"@/utils\";\nimport { LIST_LIMIT } from \"@/app/libs/constants\";\nimport { logError, logWarning } from \"@/utils/sentryUtils\";\n\nexport async function getPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"isPrivate\", true)\n    .neq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching user posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getOtherPostsByUser(\n  client: Client,\n  start = 0,\n  postId: number,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for other posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"id\", postId)\n    .neq(\"isPrivate\", true)\n    .neq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching other user posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getPrivatePostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for private posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .eq(\"isPrivate\", true)\n    // .neq(\"isDraft\", true) for now only user sees private post so they can see it even if it is draft\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching private posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\nexport async function getPinnedPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for pinned posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"post_pins\")\n    .select(\n      `\n    posts:posts (\n      *,\n      createdAt\n    )\n  `\n    ) // ✅ Aliases `posts` for better structure\n    .eq(\"user_id\", id)\n    .filter(\"posts.isPrivate\", \"neq\", true)\n    .filter(\"posts.isDraft\", \"neq\", true)\n    .order(\"createdAt\", { ascending: false }) // ✅ Sort correctly\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching pinned posts\", error);\n    throw new Error(error.message);\n  }\n\n  if (!Array.isArray(data)) {\n    logError(\"Unexpected response from Supabase\", { data });\n    throw new Error(\"Invalid data format received from Supabase.\");\n  }\n\n  return (\n    data?.map(({ posts }) => ({\n      ...(posts as Post), // ✅ Explicitly cast `posts` as `Post`\n      author: posts?.author ?? \"\", // Ensure `author` is always a string\n      category: posts?.category ?? null, // Ensure `category` is `string | null`\n      ipfsImages: Array.isArray(posts?.ipfsImages)\n        ? (posts.ipfsImages as UploadResponse[]) // ✅ Already an array\n        : typeof posts?.ipfsImages === \"string\"\n        ? (JSON.parse(posts.ipfsImages) as UploadResponse[]) // ✅ Parse string\n        : null, // ❌ Set to null if neither\n    })) ?? []\n  );\n}\n\nexport async function getIsDraftPostsByUser(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for draft posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .eq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching draft posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\nexport async function getOtherIsDraftPostsByUser(\n  client: Client,\n  start = 0,\n  postId: number,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for other draft posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"posts\")\n    .select(\"*\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"id\", postId)\n    .eq(\"isDraft\", true)\n    .order(\"createdAt\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching other draft posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n\n  return data.map((post) => ({\n    ...post,\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[]) // ✅ If already an array, cast it\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  }));\n}\n\nexport async function getUserLikedPosts(\n  client: Client,\n  start = 0,\n  id?: string\n): Promise<Post[]> {\n  const range = getRange(start, LIST_LIMIT);\n\n  // If no ID is provided, retrieve the authenticated user's ID\n  if (!id) {\n    const { error: userError, data: userData } = await client.auth.getUser();\n    if (userError) {\n      logError(\"Error fetching user for liked posts\", userError);\n      throw new Error(\"Failed to retrieve authenticated user.\");\n    }\n    id = userData?.user?.id;\n    if (!id) {\n      throw new Error(\"User ID is undefined.\");\n    }\n  }\n\n  const { data, error } = await client\n    .from(\"likes\")\n    .select(\"posts(*),created_at\")\n    .eq(\"author\", id) // Filter posts by the author_id\n    .neq(\"posts.isPrivate\", true)\n    .neq(\"posts.isDraft\", true)\n    .order(\"created_at\", { ascending: false }) // Order posts by creation date, descending\n    .range(range[0], range[1]);\n\n  if (error) {\n    logError(\"Supabase error fetching liked posts\", error);\n    throw new Error(error.message);\n  }\n\n  // console.log(\"Supabase raw data:\", data);\n  // Extract posts, filtering out any null values\n  const posts = data?.flatMap((like) => (like.posts ? [like.posts] : [])) ?? []; // ✅ Ensure posts exist\n\n  return posts.map((post) => ({\n    ...post,\n    author: post.author ?? \"\", // ✅ Ensure `author` is always a string\n    ipfsImages: Array.isArray(post.ipfsImages)\n      ? (post.ipfsImages as UploadResponse[])\n      : typeof post.ipfsImages === \"string\"\n      ? (JSON.parse(post.ipfsImages) as UploadResponse[]) // ✅ Parse string to UploadResponse[]\n      : null, // ❌ Set to null if neither\n  })) as Post[]; // ✅ Cast the final array as `Post[]`\n}\n"],"names":["NoItemFound","title","content","subContent","div","className","TabIcon","text","color","width","height","p","GRID_SIZES","LG","ImageView","dynamic","ssr","loading","PhotoGridTwo","data","isLoading","hasNextPage","fetchNextPage","isFetchingNextPage","useRef","photos","setPhotos","useState","transformedPosts","setTransformedPosts","stableLoading","setStableLoading","imageIndex","setImageIndex","size","setSize","handleImageIndex","useCallback","context","index","loadMore","length","InfiniteScroll","isLoadingInitial","isLoadingMore","map","photo","style","PhotoOverlay","Image","src","fill","alt","String","priority","sizes","section","timeAgo","createdAt","button","OptionMenuIcon","truncateText","caption","prompt","id","generateEthereumWallet","wallet","ethers","createRandom","address","privateKey","publicKey","getRange","page","limit","from","createThirdwebClient","clientId","process","createClient","cookieStore","cookies","createServerClient","getAll","setAll","cookiesToSet","forEach","name","value","options","set","auth","autoRefreshToken","persistSession","detectSessionInUrl","TAB_CONFIG","Tabs","hideDraft","currentIndex","setCurrentIndex","creationTab","profileTab","initFromUrl","useCreationAndProfileStore","useSearchParams","tabs","useMemo","filter","tab","motion","initial","opacity","animate","transition","duration","TabBtn","pathname","usePathname","router","useRouter","searchParams","startTransition","useTransition","setCreationTab","setProfileTab","isActive","createTabUrl","tabName","params","URLSearchParams","toString","toLowerCase","handleClick","replace","scroll","onClick","whileTap","scale","disabled","isPending","GlobeIcon","CrossedEyeIcon","HeartIcon","PinIcon","DraftIcon","UserIcon","PhotoGridIcon","observerElement","children","props","Array","_","Skeleton","baseColor","ref","messageCache","safeStringify","undefined","substring","MAX_OBJECT_SIZE","str","JSON","stringify","e","cleanThrottleCache","now","Date","keys","Object","MAX_CACHE_SIZE","key","timestamp","time","sort","a","b","slice","item","MIN_THROTTLE_MS","isThrottled","cacheKey","count","captureException","error","errorMessage","Error","message","throttleKey","safeContext","fromEntries","entries","Sentry","extra","level","safeMessage","captureMessage","op","hideContent","hover","setHover","userId","useUser","likes","likesCount","loadingLikes","hasUserLiked","usePostLikes","Number","supabase","mutate","toggleLike","useLikePost","author","userHasLiked","some","like","handleCommentClick","comments","loadingComments","useComments","useRealtimeComments","handleView","push","onMouseEnter","onMouseLeave","ImageOptionMenu","image","postId","HeartFillIcon","formatNumber","ChatIcon","Link","href","getPostsByUser","client","start","range","LIST_LIMIT","userError","userData","getUser","logError","user","select","eq","neq","order","ascending","post","ipfsImages","isArray","parse","getPrivatePostsByUser","getPinnedPostsByUser","posts","category","getIsDraftPostsByUser","getUserLikedPosts","flatMap"],"sourceRoot":""}