{"version":3,"file":"18022.js","mappings":"okBAaO,0BAA4C,oDAAyD,EAC5G,MAA8B,OAAW,EACzC,kCACA,cACA,gBACK,EAEL,QAAwB,kBAAY,EACpC,WACA,mEACA,kBAdA,GAcA,CACK,EACL,uDACA,GACA,eACA,QACA,MAAe,IAAY,CAC3B,YACA,iBACA,QAvBA,GAwBA,aACA,WACA,aAEA,SACA,gEAEA,YACA,+DAEA,WACA,gEAGA,MAAoB,OAAmB,EACvC,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,CAAU,eAAiB,CAC3B,EACQ,QAAU,SACV,QAAU,OACV,QAAU,UAClB,QACA,gBACA,UACA,aACQ,OAAS,SACjB,EAEA,SADA,6BAAkD,EAAS,EAC3D,CAKO,oBACP,oBAEA,+DACA,cACA,KAAc,OAAS,EACvB,sBACA,aACA,YACA,QACA,iBACS,EACT,SACA,6BACA,iCAA8C,cAC9C,CAAS,CACJ,EACL,SAEA,MADA,iBACA,qCAAuD,eAAsB,GAE7E,qBACA,WACA,GAAQ,OAAK,IACb,OACA,kBACA,0BACA,4BAGA,4CAAmD,OAAS,IAAO,EACnE","sources":["webpack://unreal/./node_modules/.pnpm/thirdweb@5.93.5_@aws-sdk+client-lambda@3.777.0_@types+react-dom@19.0.4_@types+react@19.0.12___ouklnsjwvogyqsuwnvucv7k7o4/node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/biconomy.js"],"sourcesContent":["import { encodeAbiParameters } from \"viem\";\nimport { ZERO_ADDRESS } from \"../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../contract/contract.js\";\nimport { getAddress } from \"../../../../utils/address.js\";\nimport { isHex } from \"../../../../utils/encoding/helpers/is-hex.js\";\nimport { keccak256 } from \"../../../../utils/hashing/keccak256.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { readContract } from \"../../../read-contract.js\";\n// we do not send multiple batches so this stays consistent\nconst BATCH_ID = 0n;\n/**\n * @internal - only exported for testing\n */\nexport async function prepareBiconomyTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forwarderContract = getContract({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    // get the nonce\n    const nonce = await readContract({\n        contract: forwarderContract,\n        method: \"function getNonce(address,uint256) view returns (uint256)\",\n        params: [account.address, BATCH_ID],\n    });\n    const deadline = Math.floor(Date.now() / 1000) + (gasless.deadlineSeconds ?? 3600);\n    const request = {\n        from: account.address,\n        to: serializableTransaction.to,\n        token: ZERO_ADDRESS,\n        txGas: serializableTransaction.gas,\n        tokenGasPrice: 0n,\n        batchId: BATCH_ID,\n        batchNonce: nonce,\n        deadline: deadline,\n        data: serializableTransaction.data,\n    };\n    if (!request.to) {\n        throw new Error(\"Cannot send a transaction without a `to` address\");\n    }\n    if (!request.txGas) {\n        throw new Error(\"Cannot send a transaction without a `gas` value\");\n    }\n    if (!request.data) {\n        throw new Error(\"Cannot send a transaction without a `data` value\");\n    }\n    // create the hash\n    const message = encodeAbiParameters([\n        { type: \"address\" },\n        { type: \"address\" },\n        { type: \"address\" },\n        { type: \"uint256\" },\n        { type: \"uint256\" },\n        { type: \"uint256\" },\n        { type: \"uint256\" },\n        { type: \"bytes32\" },\n    ], [\n        getAddress(request.from),\n        getAddress(request.to),\n        getAddress(request.token),\n        request.txGas,\n        request.tokenGasPrice,\n        request.batchId,\n        request.batchNonce,\n        keccak256(request.data),\n    ]);\n    const signature = await account.signMessage({ message });\n    return [request, signature];\n}\n/**\n * @internal\n */\nexport async function relayBiconomyTransaction(options) {\n    const [request, signature] = await prepareBiconomyTransaction(options);\n    // send the transaction to the biconomy api\n    const response = await fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", {\n        method: \"POST\",\n        body: stringify({\n            apiId: options.gasless.apiId,\n            params: [request, signature],\n            from: request.from,\n            to: request.to,\n            gasLimit: request.txGas,\n        }),\n        headers: {\n            \"x-api-key\": options.gasless.apiKey,\n            \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n    });\n    if (!response.ok) {\n        response.body?.cancel();\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    const transactionHash = json.txHash;\n    if (isHex(transactionHash)) {\n        return {\n            transactionHash: transactionHash,\n            chain: options.transaction.chain,\n            client: options.transaction.client,\n        };\n    }\n    throw new Error(`Failed to send transaction: ${stringify(json)}`);\n}\n//# sourceMappingURL=biconomy.js.map"],"names":[],"sourceRoot":""}