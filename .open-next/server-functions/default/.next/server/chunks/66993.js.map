{"version":3,"file":"66993.js","mappings":"2fAAA,OACA,wBACA,mBACA,2BACA,2BACA,uBACA,6BACA,EACA,CAAC,MAAsB,EAEvB,wBACA,yBAA8E,kDAA6D,SAC3I,YACA,iCACA,GAGA,YACA,QACA,QACA,GACA,EALA,MAMA,IACA,IACA,GACA,EACA,aACA,0BACA,kDAOA,GAGA,4HAEA,6HAEA,6HAEA,6HAEA,CACA,GAGA,sGAEA,+GAEA,kHAEA,mHAEA,OACA,EAMA,qBAeA,GAdA,eACA,WAIA,eAIA,eAGA,qBACA,mBACA,EAnDA,GAmDA,EAlDA,GAmDA,+CACA,aACA,2CACA,kBACA,kBAA6B,iBAAmB,SAChD,YAAoB,YAAe,IACnC,6BACA,8BAEA,4BACA,kCAEA,GADA,sBACA,QACA,UACA,YAAsB,IAAO,KAC7B,kBACA,uBACA,6BACA,MACA,IACA,KAEA,iBACA,CACA,CACA,YACA,kBACA,sBACA,CAKA,eACA,gEAIA,uBACA,YAAoB,YAAe,IACnC,4CACA,4CAEA,4BACA,sCACA,sCACA,0CACA,WACA,YAAoB,IAAc,IAClC,YAAsB,IAAc,IACpC,oDACA,qCAGA,uBACA,kBACA,CAGA,kBACA,uBACA,IACA,YAAoB,KAAQ,IAC5B,oBACA,sBACA,YAAoB,KAAQ,IAC5B,mCACA,mCACA,mCACA,mCACA,YAAoB,KAAQ,IAC5B,sCACA,YAAoB,IAAO,IAC3B,+CACA,YAAoB,KAAQ,IAC5B,gDACA,wCACA,CAGA,cACA,kBACA,OACA,mBACA,YAAoB,KAAQ,IAC5B,qBACA,yBACA,YAAoB,KAAQ,KAC5B,aACA,mBACA,kBACA,8BACA,6BACA,CACA,CAGA,uBACA,aAAsB,KAAS,IAC/B,aAAwB,KAAS,KACjC,wCACA,MACA,MACA,sCACA,mDACA,CAEA,CAGA,0BACA,aAAsB,KAAS,IAC/B,aAAwB,KAAS,IACjC,uBACA,IACA,IACA,sCACA,YAIA,CAGA,sCACA,qBACA,kBACA,CAIA,uBACA,mBACA,WACA,qBACA,qCACA,iBACA,aACA,qBACA,QACA,kBACA,KACA,WAgTA,GACA,cACA,wCACA,SACA,YAAkB,MAAgB,IAClC,UACA,UACA,QACA,YAAkB,IAAY,KAC9B,YAAoB,WAAmB,IACvC,eACA,cACA,eAEA,QACA,CACA,QACA,EAjUA,GACA,gBAA2B,IAAe,KAC1C,iCACA,YACA,eA8TA,KACA,kBACA,gBACA,kBACA,UACA,8BACA,CACA,QACA,EAtUA,KACA,KACA,UACA,mBACA,CACA,SACA,YAAoB,cAAsB,IAC1C,kBACA,iBACA,YACA,CAAO,EAEP,QACA,CAGA,iBACA,4CACA,qCACA,QACA,sBAAoC,KAAY,MAChD,OACA,MACA,YAAyB,YAAkB,IAC3C,YAAwB,IAAO,KAC/B,UAEA,EADA,WACA,eACA,mCACA,uCACA,IAEA,CAEA,CACA,CAMA,aACA,YACA,4CACA,YAAoB,YAAe,IACnC,YAAsB,YAAe,KACrC,MACA,UACA,OACA,aACA,KACA,QACA,SACA,KACA,QACA,SACA,KACA,QACA,aACA,KACA,QACA,yCACA,KACA,QACA,iBACA,KACA,QACA,qBACA,KACA,QACA,uBACA,KACA,SACA,0BACA,CACA,sBACA,wCACA,CAEA,CAGA,kBACA,QACA,YAAoB,YAAe,KACnC,SACA,IACA,kBACA,YAAsB,YAAe,IACrC,uBAEA,OACA,GAhSA,EAiSA,KACA,KAEA,kCACA,GACA,IApSA,GAoSA,oCACA,qBACA,KAGA,gDACA,CACA,YAAoB,YAAe,KACnC,SACA,IACA,kBACA,YAAsB,YAAe,IACrC,uBAEA,OACA,GArTA,EAsTA,KACA,KAEA,kCACA,GACA,IAzTA,GAyTA,oCACA,qBACA,KAGA,GA9TA,GA8TA,0CACA,CACA,YAAoB,cAAmB,IACvC,YAAsB,cAAmB,KACzC,yBACA,gFACA,IArUA,CAqUA,CACA,CAEA,QACA,0BACA,6BACA,0BAGA,OADA,EADA,qCA1UA,EA6UA,CAKA,+BACA,oBACA,UAEA,mCACA,+DACA,MACA,sBAAoC,WAA0B,KAC9D,gBACA,QACA,CACA,CAGA,8BACA,WACA,gDACA,6DACA,CAEA,sCAOA,OANA,IACA,kCACA,KAEA,aACA,kCACA,kCACA,CAEA,6BACA,UACA,e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","sources":["webpack://unreal/./node_modules/.pnpm/uqr@0.1.2/node_modules/uqr/dist/index.mjs","webpack://unreal/../../../../src/react/web/ui/components/QRCode/QRCodeRenderer.tsx"],"sourcesContent":["var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n"],"names":[],"sourceRoot":""}