{"version":3,"file":"74432.js","mappings":"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","sources":["webpack://unreal/./src/app/home/components/photoGallary.tsx"],"sourcesContent":["\"use client\";\nimport {\n  MasonryPhotoAlbum,\n  RenderImageContext,\n  RenderImageProps,\n  RenderPhotoContext,\n} from \"react-photo-album\";\nimport \"react-photo-album/masonry.css\";\nimport { useEffect, useState } from \"react\";\nimport { LIST_LIMIT, MD_BREAKPOINT } from \"@/app/libs/constants\";\n//import { ChatIcon, HeartFillIcon, HeartIcon, OptionMenuIcon } from \"@/app/components/icons\";\nimport PhotoOverlay, { ExtendedRenderPhotoContext } from \"./photoOverlay\";\n\nimport Image from \"next/image\";\nimport ImageView from \"./imageView\";\n// import { usePostsQuery } from \"@/hooks/usePostsQuery\";\nimport { supabase } from \"$/supabase/client\";\nimport {\n  getFollowingPosts,\n  getPosts,\n  getTopPosts,\n} from \"@/queries/post/getPosts\";\nimport { useInfiniteQuery } from \"@tanstack/react-query\";\nimport InfiniteScroll from \"./InfiniteScroll\";\nimport { formattedPhotos, formattedPhotosForGallary } from \"../formattedPhotos\";\nimport { Post } from \"$/types/data.types\";\nimport { useSearchParams } from \"next/navigation\";\n// import { getAuthorUserName } from \"@/queries/post/getAuthorUserName\";\nimport useAuthorUsername from \"@/hooks/useAuthorUserName\";\nimport useAuthorImage from \"@/hooks/useAuthorImage\";\nimport Link from \"next/link\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { useGalleryStore } from \"@/stores/galleryStore\";\nimport OptimizedImage from \"@/app/components/OptimizedImage\";\n\nfunction renderNextImage(\n  { alt = \"\", title, sizes }: RenderImageProps,\n  { photo, width, height, index = 0 }: RenderImageContext\n) {\n  // Use priority loading for the first 4 images (eagerly loaded)\n  // This provides fast initial rendering for visible content\n  const shouldPrioritize = index < 8;\n\n  // Extract image name for tracking\n  const imageName =\n    typeof photo === \"object\" && photo !== null && \"src\" in photo\n      ? String(photo.src).split(\"/\").pop()?.split(\"?\")[0] ||\n        `gallery-img-${index}`\n      : `gallery-img-${index}`;\n\n  // Responsive size hints for optimal loading\n  const responsiveSizes =\n    sizes || \"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\";\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        position: \"relative\",\n        aspectRatio: `${width} / ${height}`,\n      }}\n    >\n      <OptimizedImage\n        fill\n        src={photo}\n        alt={alt || \"Gallery image\"}\n        title={title}\n        sizes={responsiveSizes}\n        loading={shouldPrioritize ? \"eager\" : \"lazy\"}\n        priority={shouldPrioritize}\n        placeholder={\"blurDataURL\" in photo ? \"blur\" : undefined}\n        trackPerformance={process.env.NODE_ENV === \"development\"}\n        imageName={imageName}\n      />\n    </div>\n  );\n}\n\nexport default function PhotoGallary({}) {\n  const [imageIndex, setImageIndex] = useState(-1);\n  const [columns, setColumns] = useState<number | null>(null);\n\n  // Use Zustand store for tab state\n  const { activeTab, initFromUrl } = useGalleryStore();\n\n  // Sync with URL on initial load (for direct URL access)\n  const searchParams = useSearchParams();\n  useEffect(() => {\n    const urlParam = searchParams.get(\"s\");\n    initFromUrl(urlParam);\n  }, [searchParams, initFromUrl]);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetchingNextPage,\n    hasNextPage,\n    fetchNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"posts\", activeTab.toLowerCase()],\n    queryFn: async ({ pageParam = 0 }) => {\n      let result: Post[] = [];\n      // Use activeTab from Zustand instead of URL param\n      if (activeTab === \"EXPLORE\") {\n        result = await getPosts(supabase, pageParam);\n      } else if (activeTab === \"FOLLOWING\") {\n        result = await getFollowingPosts(supabase, pageParam);\n      } else if (activeTab === \"TOP\") {\n        result = await getTopPosts(supabase, pageParam);\n      } else {\n        result = await getPosts(supabase, pageParam);\n      }\n\n      return {\n        data: result ?? [],\n        nextCursor: result.length === LIST_LIMIT ? pageParam + 1 : undefined,\n      };\n    },\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => lastPage?.nextCursor,\n    staleTime: 1000 * 60 * 5, // Data stays fresh for 5 minutes\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const handleResize = () => {\n      requestAnimationFrame(() => {\n        setColumns(window.innerWidth < MD_BREAKPOINT ? 2 : 4);\n      });\n    };\n\n    const resizeObserver = new ResizeObserver(handleResize);\n    resizeObserver.observe(document.body);\n\n    handleResize();\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  const handleImageIndex = (context: RenderPhotoContext) => {\n    setImageIndex(context.index);\n  };\n\n  if (isError) {\n    return (\n      <p className=\"wrapper\">{\"message\" in error ? error.message : error}</p>\n    );\n  }\n\n  // Show loading state during initial data fetch\n  if (isLoading || !columns) {\n    return (\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 w-full\">\n        {Array(12)\n          .fill(null)\n          .map((_, index) => (\n            <Skeleton\n              key={index}\n              height={200}\n              baseColor=\"#1a1a1a\"\n              highlightColor=\"#333\"\n            />\n          ))}\n      </div>\n    );\n  }\n\n  // Only show no data message when we have data object but it's empty\n  if (!data || data.pages.length === 0 || data.pages[0].data.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center w-full min-h-[200px]\">\n        <p className=\"text-center text-lg text-primary-6\">No posts found</p>\n        <p className=\"text-center text-sm text-primary-7 mt-2\">\n          {activeTab === \"FOLLOWING\"\n            ? \"Follow some creators to see their posts here\"\n            : \"Be the first to share something amazing\"}\n        </p>\n      </div>\n    );\n  }\n\n  const photos = formattedPhotosForGallary(data?.pages ?? []);\n\n  return (\n    <div className=\"w-full\">\n      <InfiniteScroll\n        isLoadingInitial={isLoading}\n        isLoadingMore={isFetchingNextPage}\n        loadMore={() => hasNextPage && fetchNextPage()}\n        hasNextPage={hasNextPage}\n      >\n        <MasonryPhotoAlbum\n          photos={photos}\n          columns={columns}\n          spacing={4}\n          render={{\n            extras: (_, context) => (\n              <PhotoWithAuthor\n                context={context as ExtendedRenderPhotoContext}\n                handleImageIndex={handleImageIndex}\n              />\n            ),\n            image: renderNextImage,\n          }}\n        />\n      </InfiniteScroll>\n      <ImageView\n        photo={imageIndex > -1 && photos[imageIndex]}\n        setImageIndex={setImageIndex}\n      />\n    </div>\n  );\n}\n\nfunction PhotoWithAuthor({\n  context,\n  handleImageIndex,\n}: {\n  context: ExtendedRenderPhotoContext;\n  handleImageIndex: (context: RenderPhotoContext) => void;\n}) {\n  const authorId = context.photo.author || \"\"; // Ensure it's always a string\n\n  const { data: userName, isLoading: isLoading } = useAuthorUsername(authorId);\n  const { data: image, isLoading: imageLoading } = useAuthorImage(authorId);\n  return (\n    <PhotoOverlay\n      setImageIndex={() => handleImageIndex(context)}\n      context={context}\n    >\n      <div className=\"absolute flex items-center gap-1 bottom-2 left-2\">\n        {!isLoading && !imageLoading && userName && (\n          <Link\n            href={`/home/profile/${authorId}`}\n            className=\"flex items-center gap-2\"\n          >\n            <div className=\"rounded-full\">\n              {image ? (\n                <OptimizedImage\n                  className=\"rounded-full border-[1px] border-primary-3 drop-shadow-lg\"\n                  src={image}\n                  width={24}\n                  height={24}\n                  alt={`${userName}'s profile`}\n                  trackPerformance={true}\n                  imageName={`profile-${authorId}`}\n                />\n              ) : (\n                <div className=\"w-6 h-6 bg-gray-300 rounded-full\" /> // Fallback avatar\n              )}\n            </div>\n            <p className=\"font-light text-sm drop-shadow-lg\">{userName}</p>\n          </Link>\n        )}\n      </div>\n    </PhotoOverlay>\n  );\n}\n"],"names":["renderNextImage","alt","title","sizes","photo","width","height","index","shouldPrioritize","imageName","String","src","split","pop","div","style","position","aspectRatio","OptimizedImage","fill","responsiveSizes","loading","priority","placeholder","undefined","trackPerformance","process","PhotoGallary","imageIndex","setImageIndex","useState","columns","setColumns","activeTab","initFromUrl","useGalleryStore","useSearchParams","isLoading","isError","error","data","isFetchingNextPage","hasNextPage","fetchNextPage","useInfiniteQuery","queryKey","toLowerCase","queryFn","pageParam","result","getPosts","supabase","getFollowingPosts","getTopPosts","nextCursor","length","LIST_LIMIT","initialPageParam","getNextPageParam","lastPage","staleTime","refetchOnWindowFocus","refetchOnMount","handleImageIndex","context","p","className","message","Array","map","_","Skeleton","baseColor","highlightColor","pages","photos","formattedPhotosForGallary","InfiniteScroll","isLoadingInitial","isLoadingMore","loadMore","MasonryPhotoAlbum","spacing","render","extras","PhotoWithAuthor","image","ImageView","authorId","author","userName","useAuthorUsername","imageLoading","useAuthorImage","PhotoOverlay","Link","href"],"sourceRoot":""}